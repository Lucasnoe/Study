
11_InputCapture_f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000026c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  4 .ARM          00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800040c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800040c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006d2  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000186  00000000  00000000  00010b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fa0  00000000  00000000  00010d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000cf8  00000000  00000000  00011d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053c29  00000000  00000000  000129f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00066621  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  00066674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003ec 	.word	0x080003ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003ec 	.word	0x080003ec

080001d8 <main>:
//toggle bit

#define tog_bit(Y,bit_x) (Y^=(1<<bit_x))

int timestamp = 0;
int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	tim2_pa5_output_Compare();
 80001dc:	f000 f814 	bl	8000208 <tim2_pa5_output_Compare>
	tim3_pa6_intput_Capture();
 80001e0:	f000 f86c 	bl	80002bc <tim3_pa6_intput_Capture>


	while(1){

		//Aguardar até a borda ser detectada:
		while(!(TIM3->SR & SR_CC1IF)){}
 80001e4:	bf00      	nop
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <main+0x28>)
 80001e8:	691b      	ldr	r3, [r3, #16]
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f9      	beq.n	80001e6 <main+0xe>

		//Ler o valor capturado
		timestamp = TIM3->CCR1;
 80001f2:	4b03      	ldr	r3, [pc, #12]	; (8000200 <main+0x28>)
 80001f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b02      	ldr	r3, [pc, #8]	; (8000204 <main+0x2c>)
 80001fa:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & SR_CC1IF)){}
 80001fc:	e7f2      	b.n	80001e4 <main+0xc>
 80001fe:	bf00      	nop
 8000200:	40000400 	.word	0x40000400
 8000204:	2000001c 	.word	0x2000001c

08000208 <tim2_pa5_output_Compare>:

	// Habilitar o clock
		TIM2->CR1 = CR1_CEN;
}

void tim2_pa5_output_Compare(void){
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0

	//Habilitar o acesso do clock ao GPIOA e GPIOC
		RCC->AHB1ENR |= GPIOAEN;
 800020c:	4b29      	ldr	r3, [pc, #164]	; (80002b4 <tim2_pa5_output_Compare+0xac>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a28      	ldr	r2, [pc, #160]	; (80002b4 <tim2_pa5_output_Compare+0xac>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
//	/*Define o Pino PC13 como Entrada*/
//		GPIOC->MODER |=  (1U<<26);
//		GPIOC->MODER &= ~(1U<<27);

	/*Define o Pino PA5 como alternate function*/
		GPIOA->MODER &= ~(1U<<10);
 8000218:	4b27      	ldr	r3, [pc, #156]	; (80002b8 <tim2_pa5_output_Compare+0xb0>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a26      	ldr	r2, [pc, #152]	; (80002b8 <tim2_pa5_output_Compare+0xb0>)
 800021e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000222:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |=  (1U<<11);
 8000224:	4b24      	ldr	r3, [pc, #144]	; (80002b8 <tim2_pa5_output_Compare+0xb0>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a23      	ldr	r2, [pc, #140]	; (80002b8 <tim2_pa5_output_Compare+0xb0>)
 800022a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800022e:	6013      	str	r3, [r2, #0]

	// Determina o alternate function de PA5 (AF01)
		GPIOA->AFR[0] |=  (1U<<20);
 8000230:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <tim2_pa5_output_Compare+0xb0>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a20      	ldr	r2, [pc, #128]	; (80002b8 <tim2_pa5_output_Compare+0xb0>)
 8000236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800023a:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<21);
 800023c:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <tim2_pa5_output_Compare+0xb0>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <tim2_pa5_output_Compare+0xb0>)
 8000242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000246:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<22);
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <tim2_pa5_output_Compare+0xb0>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <tim2_pa5_output_Compare+0xb0>)
 800024e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000252:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<23);
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <tim2_pa5_output_Compare+0xb0>)
 8000256:	6a1b      	ldr	r3, [r3, #32]
 8000258:	4a17      	ldr	r2, [pc, #92]	; (80002b8 <tim2_pa5_output_Compare+0xb0>)
 800025a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800025e:	6213      	str	r3, [r2, #32]

	// Habilitar o clock ao timer2
		RCC->APB1ENR |= TIM3EN;
 8000260:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <tim2_pa5_output_Compare+0xac>)
 8000262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000264:	4a13      	ldr	r2, [pc, #76]	; (80002b4 <tim2_pa5_output_Compare+0xac>)
 8000266:	f043 0302 	orr.w	r3, r3, #2
 800026a:	6413      	str	r3, [r2, #64]	; 0x40

	// definir o valor do prescaler
		TIM2->PSC = 1600-1;  // 16MHz/1600 = 10 000
 800026c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000270:	f240 623f 	movw	r2, #1599	; 0x63f
 8000274:	629a      	str	r2, [r3, #40]	; 0x28

	// definir o valor do auto-reload
		TIM2->ARR = 10000-1; // 10000/10000 = 1
 8000276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027a:	f242 720f 	movw	r2, #9999	; 0x270f
 800027e:	62da      	str	r2, [r3, #44]	; 0x2c

	// Define o modo de alternacia da saida
		TIM2->CCMR1 = OC_TOGGLE;
 8000280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000284:	2230      	movs	r2, #48	; 0x30
 8000286:	619a      	str	r2, [r3, #24]

	//Enable Tim2 ch1 em modo de comparação
		TIM2->CCER |= CCER_CC1E;
 8000288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028c:	6a1b      	ldr	r3, [r3, #32]
 800028e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6213      	str	r3, [r2, #32]

	// Limpar o contador
		TIM2->CNT = 0;
 8000298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24

	// Habilita o timer2
		TIM2->CR1 = CR1_CEN;
 80002a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a4:	2201      	movs	r2, #1
 80002a6:	601a      	str	r2, [r3, #0]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000

080002bc <tim3_pa6_intput_Capture>:

void tim3_pa6_intput_Capture(void){
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0

	//Habilitar o acesso do clock ao GPIOA e GPIOC
		RCC->AHB1ENR |= GPIOAEN;
 80002c0:	4b20      	ldr	r3, [pc, #128]	; (8000344 <tim3_pa6_intput_Capture+0x88>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	4a1f      	ldr	r2, [pc, #124]	; (8000344 <tim3_pa6_intput_Capture+0x88>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30
	/*Define o Pino PC13 como saída*/
//		GPIOC->MODER |=  (1U<<26);
//		GPIOC->MODER &= ~(1U<<27);

	/*Define o Pino PA6 como alternate function*/
		GPIOA->MODER &= ~(1U<<12);
 80002cc:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <tim3_pa6_intput_Capture+0x8c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <tim3_pa6_intput_Capture+0x8c>)
 80002d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002d6:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |=  (1U<<13);
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <tim3_pa6_intput_Capture+0x8c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a1a      	ldr	r2, [pc, #104]	; (8000348 <tim3_pa6_intput_Capture+0x8c>)
 80002de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002e2:	6013      	str	r3, [r2, #0]

	// Determina o alternate function de PA6 (AF02) TIM3_CH1
		GPIOA->AFR[0] &= ~(1U<<24);
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <tim3_pa6_intput_Capture+0x8c>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a17      	ldr	r2, [pc, #92]	; (8000348 <tim3_pa6_intput_Capture+0x8c>)
 80002ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80002ee:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |=  (1U<<25);
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <tim3_pa6_intput_Capture+0x8c>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a14      	ldr	r2, [pc, #80]	; (8000348 <tim3_pa6_intput_Capture+0x8c>)
 80002f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002fa:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<26);
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <tim3_pa6_intput_Capture+0x8c>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <tim3_pa6_intput_Capture+0x8c>)
 8000302:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000306:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<27);
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <tim3_pa6_intput_Capture+0x8c>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <tim3_pa6_intput_Capture+0x8c>)
 800030e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000312:	6213      	str	r3, [r2, #32]

	// Habilita o clock ao timer3
		RCC->APB1ENR |= TIM3EN;
 8000314:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <tim3_pa6_intput_Capture+0x88>)
 8000316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000318:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <tim3_pa6_intput_Capture+0x88>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6413      	str	r3, [r2, #64]	; 0x40

	// definir o valor do prescaler
		TIM3->PSC = 16000-1;  // 16MHz/16000 = 1000
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <tim3_pa6_intput_Capture+0x90>)
 8000322:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000326:	629a      	str	r2, [r3, #40]	; 0x28

	//Define CH1 em modo de captura de entrada
		TIM3->CCMR1 = CCMR_CC1S;
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <tim3_pa6_intput_Capture+0x90>)
 800032a:	2201      	movs	r2, #1
 800032c:	619a      	str	r2, [r3, #24]

	//Definir o CH1 para capturar a borda de subida
		TIM3->CCER = CCER_CC1E;
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <tim3_pa6_intput_Capture+0x90>)
 8000330:	2201      	movs	r2, #1
 8000332:	621a      	str	r2, [r3, #32]

	// Habilitar o timer3
		TIM3->CR1 = CR1_CEN;
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <tim3_pa6_intput_Capture+0x90>)
 8000336:	2201      	movs	r2, #1
 8000338:	601a      	str	r2, [r3, #0]
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	40023800 	.word	0x40023800
 8000348:	40020000 	.word	0x40020000
 800034c:	40000400 	.word	0x40000400

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000354:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490d      	ldr	r1, [pc, #52]	; (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 f811 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ff29 	bl	80001d8 <main>

08000386 <LoopForever>:

LoopForever:
  b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000394:	0800040c 	.word	0x0800040c
  ldr r2, =_sbss
 8000398:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800039c:	20000020 	.word	0x20000020

080003a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	4d0d      	ldr	r5, [pc, #52]	; (80003dc <__libc_init_array+0x38>)
 80003a8:	4c0d      	ldr	r4, [pc, #52]	; (80003e0 <__libc_init_array+0x3c>)
 80003aa:	1b64      	subs	r4, r4, r5
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	2600      	movs	r6, #0
 80003b0:	42a6      	cmp	r6, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	4d0b      	ldr	r5, [pc, #44]	; (80003e4 <__libc_init_array+0x40>)
 80003b6:	4c0c      	ldr	r4, [pc, #48]	; (80003e8 <__libc_init_array+0x44>)
 80003b8:	f000 f818 	bl	80003ec <_init>
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	10a4      	asrs	r4, r4, #2
 80003c0:	2600      	movs	r6, #0
 80003c2:	42a6      	cmp	r6, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003cc:	4798      	blx	r3
 80003ce:	3601      	adds	r6, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d6:	4798      	blx	r3
 80003d8:	3601      	adds	r6, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	08000404 	.word	0x08000404
 80003e0:	08000404 	.word	0x08000404
 80003e4:	08000404 	.word	0x08000404
 80003e8:	08000408 	.word	0x08000408

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
