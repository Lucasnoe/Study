
0_blynk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c0  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f8  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f8  080002f8  00010300  2**0
                  CONTENTS
  4 .ARM          00000000  080002f8  080002f8  00010300  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f8  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f8  080002f8  000102f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000300  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000300  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000bb  00000000  00000000  0001032a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000077  00000000  00000000  000103e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00010460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  000104a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000b0d  00000000  00000000  000104d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000010e  00000000  00000000  00010fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002fec  00000000  00000000  000110f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000140df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00014130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000000 	.word	0x20000000
 8000154:	00000000 	.word	0x00000000
 8000158:	080002e0 	.word	0x080002e0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000004 	.word	0x20000004
 8000174:	080002e0 	.word	0x080002e0

08000178 <main>:

//toggle bit

#define tog_bit(Y,bit_x) (Y^=(1<<bit_x))

int main(void){
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0

	RCC_AHB2EN_R |= (1<<1);   //Habilita o acesso do clock ao PORTB
 800017e:	4b2d      	ldr	r3, [pc, #180]	; (8000234 <main+0xbc>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4a2c      	ldr	r2, [pc, #176]	; (8000234 <main+0xbc>)
 8000184:	f043 0302 	orr.w	r3, r3, #2
 8000188:	6013      	str	r3, [r2, #0]
	GPIOB_MODE_R |= (1<<22);  //Define o pino 9 como OUTPUT
 800018a:	4b2b      	ldr	r3, [pc, #172]	; (8000238 <main+0xc0>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4a2a      	ldr	r2, [pc, #168]	; (8000238 <main+0xc0>)
 8000190:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000194:	6013      	str	r3, [r2, #0]
	GPIOB_MODE_R &= ~(1<<23);  //Define o pino 9 como OUTPUT
 8000196:	4b28      	ldr	r3, [pc, #160]	; (8000238 <main+0xc0>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a27      	ldr	r2, [pc, #156]	; (8000238 <main+0xc0>)
 800019c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80001a0:	6013      	str	r3, [r2, #0]

	GPIOB_MODE_R |= (1<<18);  //Define o pino 9 como OUTPUT
 80001a2:	4b25      	ldr	r3, [pc, #148]	; (8000238 <main+0xc0>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a24      	ldr	r2, [pc, #144]	; (8000238 <main+0xc0>)
 80001a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80001ac:	6013      	str	r3, [r2, #0]
	GPIOB_MODE_R &= ~(1<<19);  //Define o pino 9 como OUTPUT
 80001ae:	4b22      	ldr	r3, [pc, #136]	; (8000238 <main+0xc0>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a21      	ldr	r2, [pc, #132]	; (8000238 <main+0xc0>)
 80001b4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80001b8:	6013      	str	r3, [r2, #0]

	GPIOB_MODE_R |= (1<<30);  //Define o pino 9 como OUTPUT
 80001ba:	4b1f      	ldr	r3, [pc, #124]	; (8000238 <main+0xc0>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a1e      	ldr	r2, [pc, #120]	; (8000238 <main+0xc0>)
 80001c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80001c4:	6013      	str	r3, [r2, #0]
	GPIOB_MODE_R &= ~(1<<31);  //Define o pino 9 como OUTPUT
 80001c6:	4b1c      	ldr	r3, [pc, #112]	; (8000238 <main+0xc0>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a1b      	ldr	r2, [pc, #108]	; (8000238 <main+0xc0>)
 80001cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80001d0:	6013      	str	r3, [r2, #0]
//	set_bit(GPIOB_MODE_R,22);
//	clr_bit(GPIOB_MODE_R,23);

	while(1){
//		GPIOB_OD_R ^= PIN11;   //HAbilita o pino 9
		tog_bit(GPIOB_OD_R,11);
 80001d2:	4b1a      	ldr	r3, [pc, #104]	; (800023c <main+0xc4>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a19      	ldr	r2, [pc, #100]	; (800023c <main+0xc4>)
 80001d8:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 80001dc:	6013      	str	r3, [r2, #0]
		for(int i =0; i<100000 ; i++){}
 80001de:	2300      	movs	r3, #0
 80001e0:	60fb      	str	r3, [r7, #12]
 80001e2:	e002      	b.n	80001ea <main+0x72>
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	3301      	adds	r3, #1
 80001e8:	60fb      	str	r3, [r7, #12]
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	4a14      	ldr	r2, [pc, #80]	; (8000240 <main+0xc8>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	ddf8      	ble.n	80001e4 <main+0x6c>
		tog_bit(GPIOB_OD_R,9);
 80001f2:	4b12      	ldr	r3, [pc, #72]	; (800023c <main+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a11      	ldr	r2, [pc, #68]	; (800023c <main+0xc4>)
 80001f8:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
		for(int i =0; i<100000 ; i++){}
 80001fe:	2300      	movs	r3, #0
 8000200:	60bb      	str	r3, [r7, #8]
 8000202:	e002      	b.n	800020a <main+0x92>
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	3301      	adds	r3, #1
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	4a0c      	ldr	r2, [pc, #48]	; (8000240 <main+0xc8>)
 800020e:	4293      	cmp	r3, r2
 8000210:	ddf8      	ble.n	8000204 <main+0x8c>
		tog_bit(GPIOB_OD_R,15);
 8000212:	4b0a      	ldr	r3, [pc, #40]	; (800023c <main+0xc4>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a09      	ldr	r2, [pc, #36]	; (800023c <main+0xc4>)
 8000218:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800021c:	6013      	str	r3, [r2, #0]
		for(int i =0; i<100000 ; i++){}
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e002      	b.n	800022a <main+0xb2>
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3301      	adds	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <main+0xc8>)
 800022e:	4293      	cmp	r3, r2
 8000230:	ddf8      	ble.n	8000224 <main+0xac>
		tog_bit(GPIOB_OD_R,11);
 8000232:	e7ce      	b.n	80001d2 <main+0x5a>
 8000234:	5800004c 	.word	0x5800004c
 8000238:	48000400 	.word	0x48000400
 800023c:	48000414 	.word	0x48000414
 8000240:	0001869f 	.word	0x0001869f

08000244 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000244:	480d      	ldr	r0, [pc, #52]	; (800027c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000246:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000248:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <LoopForever+0x6>)
  ldr r1, =_edata
 800024e:	490d      	ldr	r1, [pc, #52]	; (8000284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000250:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <LoopForever+0xe>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000264:	4c0a      	ldr	r4, [pc, #40]	; (8000290 <LoopForever+0x16>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000272:	f000 f811 	bl	8000298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000276:	f7ff ff7f 	bl	8000178 <main>

0800027a <LoopForever>:

LoopForever:
  b LoopForever
 800027a:	e7fe      	b.n	800027a <LoopForever>
  ldr   r0, =_estack
 800027c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000284:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000288:	08000300 	.word	0x08000300
  ldr r2, =_sbss
 800028c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000290:	2000001c 	.word	0x2000001c

08000294 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC_IRQHandler>
	...

08000298 <__libc_init_array>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	4d0d      	ldr	r5, [pc, #52]	; (80002d0 <__libc_init_array+0x38>)
 800029c:	4c0d      	ldr	r4, [pc, #52]	; (80002d4 <__libc_init_array+0x3c>)
 800029e:	1b64      	subs	r4, r4, r5
 80002a0:	10a4      	asrs	r4, r4, #2
 80002a2:	2600      	movs	r6, #0
 80002a4:	42a6      	cmp	r6, r4
 80002a6:	d109      	bne.n	80002bc <__libc_init_array+0x24>
 80002a8:	4d0b      	ldr	r5, [pc, #44]	; (80002d8 <__libc_init_array+0x40>)
 80002aa:	4c0c      	ldr	r4, [pc, #48]	; (80002dc <__libc_init_array+0x44>)
 80002ac:	f000 f818 	bl	80002e0 <_init>
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	10a4      	asrs	r4, r4, #2
 80002b4:	2600      	movs	r6, #0
 80002b6:	42a6      	cmp	r6, r4
 80002b8:	d105      	bne.n	80002c6 <__libc_init_array+0x2e>
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c0:	4798      	blx	r3
 80002c2:	3601      	adds	r6, #1
 80002c4:	e7ee      	b.n	80002a4 <__libc_init_array+0xc>
 80002c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ca:	4798      	blx	r3
 80002cc:	3601      	adds	r6, #1
 80002ce:	e7f2      	b.n	80002b6 <__libc_init_array+0x1e>
 80002d0:	080002f8 	.word	0x080002f8
 80002d4:	080002f8 	.word	0x080002f8
 80002d8:	080002f8 	.word	0x080002f8
 80002dc:	080002fc 	.word	0x080002fc

080002e0 <_init>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr

080002ec <_fini>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr
