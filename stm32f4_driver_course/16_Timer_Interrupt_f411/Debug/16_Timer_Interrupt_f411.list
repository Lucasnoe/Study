
16_Timer_Interrupt_f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800043c  08000444  00010444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800043c  0800043c  00010444  2**0
                  CONTENTS
  4 .ARM          00000000  0800043c  0800043c  00010444  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800043c  08000444  00010444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800043c  0800043c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000444  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000444  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010444  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010e4  00000000  00000000  00010474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003f0  00000000  00000000  00011558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00011948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00011a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010e1  00000000  00000000  00011ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000012b3  00000000  00000000  00012ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000541bf  00000000  00000000  00013e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00068013  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000204  00000000  00000000  00068064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000424 	.word	0x08000424

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000424 	.word	0x08000424

080001d8 <main>:
#define tog_bit(Y,bit_x) (Y^=(1<<bit_x))

static void timer2_callback(void);


int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	/*Habila o clocl às GPIOS A e B*/
		set_bit(RCC->AHB1ENR,GPIOCEN);
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <main+0x34>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <main+0x34>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

		/*Define o Pino PB11 como saida*/
		set_bit(GPIOC->MODER,26);
 80001e8:	4b09      	ldr	r3, [pc, #36]	; (8000210 <main+0x38>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <main+0x38>)
 80001ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80001f2:	6013      	str	r3, [r2, #0]
		clr_bit(GPIOC->MODER,27);
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <main+0x38>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a05      	ldr	r2, [pc, #20]	; (8000210 <main+0x38>)
 80001fa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80001fe:	6013      	str	r3, [r2, #0]

	uart2_tx_init();
 8000200:	f000 f850 	bl	80002a4 <uart2_tx_init>
	tim2_1hz_interrupt_init();
 8000204:	f000 f824 	bl	8000250 <tim2_1hz_interrupt_init>


	while(1){
 8000208:	e7fe      	b.n	8000208 <main+0x30>
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800
 8000210:	40020800 	.word	0x40020800

08000214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	2b00      	cmp	r3, #0
 8000224:	db0b      	blt.n	800023e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	f003 021f 	and.w	r2, r3, #31
 800022c:	4907      	ldr	r1, [pc, #28]	; (800024c <__NVIC_EnableIRQ+0x38>)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	095b      	lsrs	r3, r3, #5
 8000234:	2001      	movs	r0, #1
 8000236:	fa00 f202 	lsl.w	r2, r0, r2
 800023a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	e000e100 	.word	0xe000e100

08000250 <tim2_1hz_interrupt_init>:

#define TIM2EN			(1U<<0)
#define CR1_CEN			(1U<<0)
#define DIER_UIE		(1U<<0)

void tim2_1hz_interrupt_init(void){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0

	// Habilitar o clock ao timer2

		RCC->APB1ENR |= TIM2EN;
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <tim2_1hz_interrupt_init+0x50>)
 8000256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <tim2_1hz_interrupt_init+0x50>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6413      	str	r3, [r2, #64]	; 0x40

	// definir o valor do prescaler
		TIM2->PSC = 1600-1;  // 16MHz/1600 = 10 000
 8000260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000264:	f240 623f 	movw	r2, #1599	; 0x63f
 8000268:	629a      	str	r2, [r3, #40]	; 0x28

	// definir o valor do auto-reload
		TIM2->ARR = 10000-1; // 10000/10000 = 1
 800026a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000272:	62da      	str	r2, [r3, #44]	; 0x2c

	// Limpar o contador
		TIM2->CNT = 0;
 8000274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000278:	2200      	movs	r2, #0
 800027a:	625a      	str	r2, [r3, #36]	; 0x24

	// Habilita o timer
		TIM2->CR1 = CR1_CEN;
 800027c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000280:	2201      	movs	r2, #1
 8000282:	601a      	str	r2, [r3, #0]

	// Habilitar a interrupção do timer
		TIM2->DIER |= DIER_UIE;
 8000284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	60d3      	str	r3, [r2, #12]

	/// Habilitar a interrupção do timer no NVIC
		NVIC_EnableIRQ(TIM2_IRQn);
 8000294:	201c      	movs	r0, #28
 8000296:	f7ff ffbd 	bl	8000214 <__NVIC_EnableIRQ>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800

080002a4 <uart2_tx_init>:

}



void uart2_tx_init(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	/*--Configurar o pino PA2 para usar a UART--*/
	/*Habilita o clock à GPIOA*/

		set_bit(RCC->AHB1ENR,GPIOAEN);
 80002a8:	4b20      	ldr	r3, [pc, #128]	; (800032c <uart2_tx_init+0x88>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	4a1f      	ldr	r2, [pc, #124]	; (800032c <uart2_tx_init+0x88>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30

	/*Definir o pino PA2 com ALTERNATE FUNCTION MODE */
		set_bit(GPIOA->MODER,MODER_PA2_1);
 80002b4:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <uart2_tx_init+0x8c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a1d      	ldr	r2, [pc, #116]	; (8000330 <uart2_tx_init+0x8c>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6013      	str	r3, [r2, #0]
		clr_bit(GPIOA->MODER,MODER_PA2_0);
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <uart2_tx_init+0x8c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a1a      	ldr	r2, [pc, #104]	; (8000330 <uart2_tx_init+0x8c>)
 80002c6:	f023 0310 	bic.w	r3, r3, #16
 80002ca:	6013      	str	r3, [r2, #0]


	/*Definir o pino PA2 como alternate function type uart_tx (AF7)*/
		set_bit(GPIOA->AFR[0],AP2_AF7_0);
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <uart2_tx_init+0x8c>)
 80002ce:	6a1b      	ldr	r3, [r3, #32]
 80002d0:	4a17      	ldr	r2, [pc, #92]	; (8000330 <uart2_tx_init+0x8c>)
 80002d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d6:	6213      	str	r3, [r2, #32]
		set_bit(GPIOA->AFR[0],AP2_AF7_1);
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <uart2_tx_init+0x8c>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a14      	ldr	r2, [pc, #80]	; (8000330 <uart2_tx_init+0x8c>)
 80002de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002e2:	6213      	str	r3, [r2, #32]
		set_bit(GPIOA->AFR[0],AP2_AF7_2);
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <uart2_tx_init+0x8c>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a11      	ldr	r2, [pc, #68]	; (8000330 <uart2_tx_init+0x8c>)
 80002ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ee:	6213      	str	r3, [r2, #32]
		clr_bit(GPIOA->AFR[0],AP2_AF7_3);
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <uart2_tx_init+0x8c>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <uart2_tx_init+0x8c>)
 80002f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002fa:	6213      	str	r3, [r2, #32]
	/*--Configurar o módulo UART--*/

	/*Habilita o clock à USART1*/
		set_bit(RCC->APB1ENR,USART2EN);
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <uart2_tx_init+0x88>)
 80002fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000300:	4a0a      	ldr	r2, [pc, #40]	; (800032c <uart2_tx_init+0x88>)
 8000302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000306:	6413      	str	r3, [r2, #64]	; 0x40
	/*Define o Baudrate*/
		uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800030c:	4909      	ldr	r1, [pc, #36]	; (8000334 <uart2_tx_init+0x90>)
 800030e:	480a      	ldr	r0, [pc, #40]	; (8000338 <uart2_tx_init+0x94>)
 8000310:	f000 f827 	bl	8000362 <uart_set_baudrate>
	/* Configurar a direção de transferência*/
		USART2->CR1=CR1_TE;
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <uart2_tx_init+0x94>)
 8000316:	2208      	movs	r2, #8
 8000318:	60da      	str	r2, [r3, #12]
	/* Enable UART module*/
		set_bit(USART2->CR1,CR1_UE);
 800031a:	4b07      	ldr	r3, [pc, #28]	; (8000338 <uart2_tx_init+0x94>)
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	4a06      	ldr	r2, [pc, #24]	; (8000338 <uart2_tx_init+0x94>)
 8000320:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000324:	60d3      	str	r3, [r2, #12]


}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40023800 	.word	0x40023800
 8000330:	40020000 	.word	0x40020000
 8000334:	00f42400 	.word	0x00f42400
 8000338:	40004400 	.word	0x40004400

0800033c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]

	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	085a      	lsrs	r2, r3, #1
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	441a      	add	r2, r3
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	fbb2 f3f3 	udiv	r3, r2, r3
 8000354:	b29b      	uxth	r3, r3

}
 8000356:	4618      	mov	r0, r3
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 8000362:	b580      	push	{r7, lr}
 8000364:	b084      	sub	sp, #16
 8000366:	af00      	add	r7, sp, #0
 8000368:	60f8      	str	r0, [r7, #12]
 800036a:	60b9      	str	r1, [r7, #8]
 800036c:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 800036e:	6879      	ldr	r1, [r7, #4]
 8000370:	68b8      	ldr	r0, [r7, #8]
 8000372:	f7ff ffe3 	bl	800033c <compute_uart_bd>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	609a      	str	r2, [r3, #8]

}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800038c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 f811 	bl	80003dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff ff0d 	bl	80001d8 <main>

080003be <LoopForever>:

LoopForever:
  b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003cc:	08000444 	.word	0x08000444
  ldr r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d4:	2000001c 	.word	0x2000001c

080003d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC_IRQHandler>
	...

080003dc <__libc_init_array>:
 80003dc:	b570      	push	{r4, r5, r6, lr}
 80003de:	4d0d      	ldr	r5, [pc, #52]	; (8000414 <__libc_init_array+0x38>)
 80003e0:	4c0d      	ldr	r4, [pc, #52]	; (8000418 <__libc_init_array+0x3c>)
 80003e2:	1b64      	subs	r4, r4, r5
 80003e4:	10a4      	asrs	r4, r4, #2
 80003e6:	2600      	movs	r6, #0
 80003e8:	42a6      	cmp	r6, r4
 80003ea:	d109      	bne.n	8000400 <__libc_init_array+0x24>
 80003ec:	4d0b      	ldr	r5, [pc, #44]	; (800041c <__libc_init_array+0x40>)
 80003ee:	4c0c      	ldr	r4, [pc, #48]	; (8000420 <__libc_init_array+0x44>)
 80003f0:	f000 f818 	bl	8000424 <_init>
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	10a4      	asrs	r4, r4, #2
 80003f8:	2600      	movs	r6, #0
 80003fa:	42a6      	cmp	r6, r4
 80003fc:	d105      	bne.n	800040a <__libc_init_array+0x2e>
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	f855 3b04 	ldr.w	r3, [r5], #4
 8000404:	4798      	blx	r3
 8000406:	3601      	adds	r6, #1
 8000408:	e7ee      	b.n	80003e8 <__libc_init_array+0xc>
 800040a:	f855 3b04 	ldr.w	r3, [r5], #4
 800040e:	4798      	blx	r3
 8000410:	3601      	adds	r6, #1
 8000412:	e7f2      	b.n	80003fa <__libc_init_array+0x1e>
 8000414:	0800043c 	.word	0x0800043c
 8000418:	0800043c 	.word	0x0800043c
 800041c:	0800043c 	.word	0x0800043c
 8000420:	08000440 	.word	0x08000440

08000424 <_init>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr

08000430 <_fini>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr
