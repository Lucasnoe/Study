
13_UARTrx_Interrupt_f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000314  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004ac  080004b4  000104b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004ac  080004ac  000104b4  2**0
                  CONTENTS
  4 .ARM          00000000  080004ac  080004ac  000104b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004ac  080004b4  000104b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ac  080004ac  000104ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004b4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c3a  00000000  00000000  000104e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000309  00000000  00000000  0001111e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00011428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  000114e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eb4e  00000000  00000000  00011570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000dcd  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000540f9  00000000  00000000  00020e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00074f84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d8  00000000  00000000  00074fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000494 	.word	0x08000494

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000494 	.word	0x08000494

080001d8 <main>:

char key;

static void uart_rx_callback(void);
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	// Acesso do clock ao PORTC
	set_bit(RCC->AHB1ENR, GPIOCEN);
 80001dc:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <main+0x30>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a09      	ldr	r2, [pc, #36]	; (8000208 <main+0x30>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	// Definir o pino PC13 como saida
	set_bit(GPIOC->MODER, MODER_PC13_0);
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <main+0x34>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <main+0x34>)
 80001ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80001f2:	6013      	str	r3, [r2, #0]
	clr_bit(GPIOC->MODER, MODER_PC13_1);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <main+0x34>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <main+0x34>)
 80001fa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80001fe:	6013      	str	r3, [r2, #0]


	uart2_rxtx_Interrupt_init();
 8000200:	f000 f87c 	bl	80002fc <uart2_rxtx_Interrupt_init>

	while(1)
 8000204:	e7fe      	b.n	8000204 <main+0x2c>
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800
 800020c:	40020800 	.word	0x40020800

08000210 <uart_rx_callback>:

	}
}

static void uart_rx_callback(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	key = USART2->DR;
 8000214:	4b0d      	ldr	r3, [pc, #52]	; (800024c <uart_rx_callback+0x3c>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <uart_rx_callback+0x40>)
 800021c:	701a      	strb	r2, [r3, #0]
		if (key != '1')
 800021e:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <uart_rx_callback+0x40>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b31      	cmp	r3, #49	; 0x31
 8000224:	d006      	beq.n	8000234 <uart_rx_callback+0x24>
		{
			set_bit(GPIOC->ODR, PIN13);
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <uart_rx_callback+0x44>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <uart_rx_callback+0x44>)
 800022c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000230:	6153      	str	r3, [r2, #20]
		else
		{
		clr_bit(GPIOC->ODR, PIN13);
		}

}
 8000232:	e005      	b.n	8000240 <uart_rx_callback+0x30>
		clr_bit(GPIOC->ODR, PIN13);
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <uart_rx_callback+0x44>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a06      	ldr	r2, [pc, #24]	; (8000254 <uart_rx_callback+0x44>)
 800023a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800023e:	6153      	str	r3, [r2, #20]
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40004400 	.word	0x40004400
 8000250:	2000001c 	.word	0x2000001c
 8000254:	40020800 	.word	0x40020800

08000258 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	// verifica se RXNE foi setado
	if(USART2->SR & SR_RXNE)
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <USART2_IRQHandler+0x18>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f003 0320 	and.w	r3, r3, #32
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <USART2_IRQHandler+0x14>
	{
		uart_rx_callback();
 8000268:	f7ff ffd2 	bl	8000210 <uart_rx_callback>
	}

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40004400 	.word	0x40004400

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4907      	ldr	r1, [pc, #28]	; (80002ac <__NVIC_EnableIRQ+0x38>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <compute_uart_bd>:
	/* Enable UART module*/
		set_bit(USART2->CR1,CR1_UE);

}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]

	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	085a      	lsrs	r2, r3, #1
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	441a      	add	r2, r3
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c8:	b29b      	uxth	r3, r3

}
 80002ca:	4618      	mov	r0, r3
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr

080002d6 <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b084      	sub	sp, #16
 80002da:	af00      	add	r7, sp, #0
 80002dc:	60f8      	str	r0, [r7, #12]
 80002de:	60b9      	str	r1, [r7, #8]
 80002e0:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	68b8      	ldr	r0, [r7, #8]
 80002e6:	f7ff ffe3 	bl	80002b0 <compute_uart_bd>
 80002ea:	4603      	mov	r3, r0
 80002ec:	461a      	mov	r2, r3
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	609a      	str	r2, [r3, #8]

}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <uart2_rxtx_Interrupt_init>:

	/*Escrever oq esta no registrador*/
	USART2->DR = (ch & 0xFF);
}

void uart2_rxtx_Interrupt_init(void){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	/*--Configurar o pino PA3 para usar a UART--*/
	/*Habilita o clock à GPIOA*/

		set_bit(RCC->AHB1ENR,GPIOAEN);
 8000300:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <uart2_rxtx_Interrupt_init+0xec>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4a38      	ldr	r2, [pc, #224]	; (80003e8 <uart2_rxtx_Interrupt_init+0xec>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6313      	str	r3, [r2, #48]	; 0x30
	/*Definir o pino PA2 com ALTERNATE FUNCTION MODE */
		set_bit(GPIOA->MODER,MODER_PA2_1);
 800030c:	4b37      	ldr	r3, [pc, #220]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a36      	ldr	r2, [pc, #216]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 8000312:	f043 0320 	orr.w	r3, r3, #32
 8000316:	6013      	str	r3, [r2, #0]
		clr_bit(GPIOA->MODER,MODER_PA2_0);
 8000318:	4b34      	ldr	r3, [pc, #208]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a33      	ldr	r2, [pc, #204]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 800031e:	f023 0310 	bic.w	r3, r3, #16
 8000322:	6013      	str	r3, [r2, #0]

	/*Definir o pino PA2 como alternate function type uart_tx (AF7)*/
		set_bit(GPIOA->AFR[0],AP2_AF7_0);
 8000324:	4b31      	ldr	r3, [pc, #196]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 8000326:	6a1b      	ldr	r3, [r3, #32]
 8000328:	4a30      	ldr	r2, [pc, #192]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 800032a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800032e:	6213      	str	r3, [r2, #32]
		set_bit(GPIOA->AFR[0],AP2_AF7_1);
 8000330:	4b2e      	ldr	r3, [pc, #184]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 8000332:	6a1b      	ldr	r3, [r3, #32]
 8000334:	4a2d      	ldr	r2, [pc, #180]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 8000336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800033a:	6213      	str	r3, [r2, #32]
		set_bit(GPIOA->AFR[0],AP2_AF7_2);
 800033c:	4b2b      	ldr	r3, [pc, #172]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 800033e:	6a1b      	ldr	r3, [r3, #32]
 8000340:	4a2a      	ldr	r2, [pc, #168]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 8000342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000346:	6213      	str	r3, [r2, #32]
		clr_bit(GPIOA->AFR[0],AP2_AF7_3);
 8000348:	4b28      	ldr	r3, [pc, #160]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 800034a:	6a1b      	ldr	r3, [r3, #32]
 800034c:	4a27      	ldr	r2, [pc, #156]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 800034e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000352:	6213      	str	r3, [r2, #32]

	/*Definir o pino PA3 com ALTERNATE FUNCTION MODE */
		set_bit(GPIOA->MODER,MODER_PA3_1);
 8000354:	4b25      	ldr	r3, [pc, #148]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a24      	ldr	r2, [pc, #144]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 800035a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800035e:	6013      	str	r3, [r2, #0]
		clr_bit(GPIOA->MODER,MODER_PA3_0);
 8000360:	4b22      	ldr	r3, [pc, #136]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a21      	ldr	r2, [pc, #132]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 8000366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800036a:	6013      	str	r3, [r2, #0]

	/*Definir o pino PA3 como alternate function type uart_rx (AF7)*/
		set_bit(GPIOA->AFR[0],AP3_AF7_0);
 800036c:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 800036e:	6a1b      	ldr	r3, [r3, #32]
 8000370:	4a1e      	ldr	r2, [pc, #120]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 8000372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000376:	6213      	str	r3, [r2, #32]
		set_bit(GPIOA->AFR[0],AP3_AF7_1);
 8000378:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 800037a:	6a1b      	ldr	r3, [r3, #32]
 800037c:	4a1b      	ldr	r2, [pc, #108]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 800037e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000382:	6213      	str	r3, [r2, #32]
		set_bit(GPIOA->AFR[0],AP3_AF7_2);
 8000384:	4b19      	ldr	r3, [pc, #100]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 8000386:	6a1b      	ldr	r3, [r3, #32]
 8000388:	4a18      	ldr	r2, [pc, #96]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 800038a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800038e:	6213      	str	r3, [r2, #32]
		clr_bit(GPIOA->AFR[0],AP3_AF7_3);
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 8000392:	6a1b      	ldr	r3, [r3, #32]
 8000394:	4a15      	ldr	r2, [pc, #84]	; (80003ec <uart2_rxtx_Interrupt_init+0xf0>)
 8000396:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800039a:	6213      	str	r3, [r2, #32]
	/*--Configurar o módulo UART--*/

	/*Habilita o clock à USART1*/
		set_bit(RCC->APB1ENR,USART2EN);
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <uart2_rxtx_Interrupt_init+0xec>)
 800039e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a0:	4a11      	ldr	r2, [pc, #68]	; (80003e8 <uart2_rxtx_Interrupt_init+0xec>)
 80003a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a6:	6413      	str	r3, [r2, #64]	; 0x40
	/*Define o Baudrate*/
		uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80003a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ac:	4910      	ldr	r1, [pc, #64]	; (80003f0 <uart2_rxtx_Interrupt_init+0xf4>)
 80003ae:	4811      	ldr	r0, [pc, #68]	; (80003f4 <uart2_rxtx_Interrupt_init+0xf8>)
 80003b0:	f7ff ff91 	bl	80002d6 <uart_set_baudrate>
	/* Configurar a direção de transferência e recepção*/
		USART2->CR1=CR1_TE;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <uart2_rxtx_Interrupt_init+0xf8>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	60da      	str	r2, [r3, #12]
		set_bit(USART2->CR1,CR1_RE);
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <uart2_rxtx_Interrupt_init+0xf8>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <uart2_rxtx_Interrupt_init+0xf8>)
 80003c0:	f043 0304 	orr.w	r3, r3, #4
 80003c4:	60d3      	str	r3, [r2, #12]

	// Habilita a interrupção RXNEIE
		set_bit(USART2->CR1,CR1_RXNEIE);
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <uart2_rxtx_Interrupt_init+0xf8>)
 80003c8:	68db      	ldr	r3, [r3, #12]
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <uart2_rxtx_Interrupt_init+0xf8>)
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	60d3      	str	r3, [r2, #12]

	// Habilita a interrupção no NVIC
		NVIC_EnableIRQ(USART2_IRQn);
 80003d2:	2026      	movs	r0, #38	; 0x26
 80003d4:	f7ff ff4e 	bl	8000274 <__NVIC_EnableIRQ>

	/* Enable UART module*/
		set_bit(USART2->CR1,CR1_UE);
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <uart2_rxtx_Interrupt_init+0xf8>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	4a05      	ldr	r2, [pc, #20]	; (80003f4 <uart2_rxtx_Interrupt_init+0xf8>)
 80003de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003e2:	60d3      	str	r3, [r2, #12]


}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020000 	.word	0x40020000
 80003f0:	00f42400 	.word	0x00f42400
 80003f4:	40004400 	.word	0x40004400

080003f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	; (8000434 <LoopForever+0x6>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	; (8000438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <LoopForever+0xe>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	; (8000444 <LoopForever+0x16>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000426:	f000 f811 	bl	800044c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042a:	f7ff fed5 	bl	80001d8 <main>

0800042e <LoopForever>:

LoopForever:
  b LoopForever
 800042e:	e7fe      	b.n	800042e <LoopForever>
  ldr   r0, =_estack
 8000430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800043c:	080004b4 	.word	0x080004b4
  ldr r2, =_sbss
 8000440:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000444:	20000020 	.word	0x20000020

08000448 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC_IRQHandler>
	...

0800044c <__libc_init_array>:
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	4d0d      	ldr	r5, [pc, #52]	; (8000484 <__libc_init_array+0x38>)
 8000450:	4c0d      	ldr	r4, [pc, #52]	; (8000488 <__libc_init_array+0x3c>)
 8000452:	1b64      	subs	r4, r4, r5
 8000454:	10a4      	asrs	r4, r4, #2
 8000456:	2600      	movs	r6, #0
 8000458:	42a6      	cmp	r6, r4
 800045a:	d109      	bne.n	8000470 <__libc_init_array+0x24>
 800045c:	4d0b      	ldr	r5, [pc, #44]	; (800048c <__libc_init_array+0x40>)
 800045e:	4c0c      	ldr	r4, [pc, #48]	; (8000490 <__libc_init_array+0x44>)
 8000460:	f000 f818 	bl	8000494 <_init>
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	10a4      	asrs	r4, r4, #2
 8000468:	2600      	movs	r6, #0
 800046a:	42a6      	cmp	r6, r4
 800046c:	d105      	bne.n	800047a <__libc_init_array+0x2e>
 800046e:	bd70      	pop	{r4, r5, r6, pc}
 8000470:	f855 3b04 	ldr.w	r3, [r5], #4
 8000474:	4798      	blx	r3
 8000476:	3601      	adds	r6, #1
 8000478:	e7ee      	b.n	8000458 <__libc_init_array+0xc>
 800047a:	f855 3b04 	ldr.w	r3, [r5], #4
 800047e:	4798      	blx	r3
 8000480:	3601      	adds	r6, #1
 8000482:	e7f2      	b.n	800046a <__libc_init_array+0x1e>
 8000484:	080004ac 	.word	0x080004ac
 8000488:	080004ac 	.word	0x080004ac
 800048c:	080004ac 	.word	0x080004ac
 8000490:	080004b0 	.word	0x080004b0

08000494 <_init>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	bf00      	nop
 8000498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049a:	bc08      	pop	{r3}
 800049c:	469e      	mov	lr, r3
 800049e:	4770      	bx	lr

080004a0 <_fini>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr
