
2_UART_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000268  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a0  080003a8  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a0  080003a0  000103a8  2**0
                  CONTENTS
  4 .ARM          00000000  080003a0  080003a0  000103a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a0  080003a8  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a0  080003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a4  080003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003a8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000695  00000000  00000000  000103d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000194  00000000  00000000  00010a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000115c5  00000000  00000000  00010cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005d7  00000000  00000000  0002227d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062c59  00000000  00000000  00022854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000854ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  00085500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000000 	.word	0x20000000
 8000154:	00000000 	.word	0x00000000
 8000158:	08000388 	.word	0x08000388

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000004 	.word	0x20000004
 8000174:	08000388 	.word	0x08000388

08000178 <main>:
void uart_tx_init(void);
void uart1_write(int ch);



int main(void){
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0



	uart_tx_init();
 800017e:	f000 f819 	bl	80001b4 <uart_tx_init>

	while(1){
		tog_bit(GPIOB->ODR,PIN11); 			//using odr register
 8000182:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <main+0x34>)
 8000184:	695b      	ldr	r3, [r3, #20]
 8000186:	4a09      	ldr	r2, [pc, #36]	; (80001ac <main+0x34>)
 8000188:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 800018c:	6153      	str	r3, [r2, #20]
		for(int i=0; i<100000; i++){}
 800018e:	2300      	movs	r3, #0
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	e002      	b.n	800019a <main+0x22>
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <main+0x38>)
 800019e:	4293      	cmp	r3, r2
 80001a0:	ddf8      	ble.n	8000194 <main+0x1c>
		uart1_write('Y');
 80001a2:	2059      	movs	r0, #89	; 0x59
 80001a4:	f000 f88c 	bl	80002c0 <uart1_write>
		tog_bit(GPIOB->ODR,PIN11); 			//using odr register
 80001a8:	e7eb      	b.n	8000182 <main+0xa>
 80001aa:	bf00      	nop
 80001ac:	48000400 	.word	0x48000400
 80001b0:	0001869f 	.word	0x0001869f

080001b4 <uart_tx_init>:
	}


}

void uart_tx_init(void){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	/*--COnfigurar o pino GPIO par usar a UART--*/
	/*Habilita o clock à GPIOA*/

		set_bit(RCC->AHB2ENR,GPIOAEN);
 80001b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80001c2:	f043 0301 	orr.w	r3, r3, #1
 80001c6:	64d3      	str	r3, [r2, #76]	; 0x4c
		set_bit(RCC->AHB2ENR,GPIOBEN);
 80001c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80001d2:	f043 0302 	orr.w	r3, r3, #2
 80001d6:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*Define o Pino PB11 como saida*/
		set_bit(GPIOB->MODER,22);
 80001d8:	4b24      	ldr	r3, [pc, #144]	; (800026c <uart_tx_init+0xb8>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a23      	ldr	r2, [pc, #140]	; (800026c <uart_tx_init+0xb8>)
 80001de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001e2:	6013      	str	r3, [r2, #0]
		clr_bit(GPIOB->MODER,23);
 80001e4:	4b21      	ldr	r3, [pc, #132]	; (800026c <uart_tx_init+0xb8>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a20      	ldr	r2, [pc, #128]	; (800026c <uart_tx_init+0xb8>)
 80001ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80001ee:	6013      	str	r3, [r2, #0]

	/*Definir o pino PB6 com ALTERNATE FUNCTION MODE */
//		set_bit(GPIOA->MODER,MODER_PA2_1);
//		clr_bit(GPIOA->MODER,MODER_PA2_0);
		set_bit(GPIOB->MODER,MODER_PB6_1);
 80001f0:	4b1e      	ldr	r3, [pc, #120]	; (800026c <uart_tx_init+0xb8>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a1d      	ldr	r2, [pc, #116]	; (800026c <uart_tx_init+0xb8>)
 80001f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001fa:	6013      	str	r3, [r2, #0]
		clr_bit(GPIOB->MODER,MODER_PB6_0);
 80001fc:	4b1b      	ldr	r3, [pc, #108]	; (800026c <uart_tx_init+0xb8>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a1a      	ldr	r2, [pc, #104]	; (800026c <uart_tx_init+0xb8>)
 8000202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000206:	6013      	str	r3, [r2, #0]

	/*Definir o pino PB6 como alternate function type uart_tx (AF7)*/
		set_bit(GPIOB->AFR[0],AF7_0);
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <uart_tx_init+0xb8>)
 800020a:	6a1b      	ldr	r3, [r3, #32]
 800020c:	4a17      	ldr	r2, [pc, #92]	; (800026c <uart_tx_init+0xb8>)
 800020e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000212:	6213      	str	r3, [r2, #32]
		set_bit(GPIOB->AFR[0],AF7_1);
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <uart_tx_init+0xb8>)
 8000216:	6a1b      	ldr	r3, [r3, #32]
 8000218:	4a14      	ldr	r2, [pc, #80]	; (800026c <uart_tx_init+0xb8>)
 800021a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800021e:	6213      	str	r3, [r2, #32]
		set_bit(GPIOB->AFR[0],AF7_2);
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <uart_tx_init+0xb8>)
 8000222:	6a1b      	ldr	r3, [r3, #32]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <uart_tx_init+0xb8>)
 8000226:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800022a:	6213      	str	r3, [r2, #32]
		clr_bit(GPIOB->AFR[0],AF7_3);
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <uart_tx_init+0xb8>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a0e      	ldr	r2, [pc, #56]	; (800026c <uart_tx_init+0xb8>)
 8000232:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000236:	6213      	str	r3, [r2, #32]
	/*--Configurar o módulo UART--*/

	/*Habilita o clock à USART1*/
		set_bit(RCC->APB2ENR,USART1EN);
 8000238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800023c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800023e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000246:	6613      	str	r3, [r2, #96]	; 0x60
	/*Define o Baudrate*/
		uart_set_baudrate(USART1, APB2_CLK, UART_BAUDRATE);
 8000248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800024c:	4908      	ldr	r1, [pc, #32]	; (8000270 <uart_tx_init+0xbc>)
 800024e:	4809      	ldr	r0, [pc, #36]	; (8000274 <uart_tx_init+0xc0>)
 8000250:	f000 f824 	bl	800029c <uart_set_baudrate>
	/* Configurar a direção de transferência*/
		USART1->CR1=CR1_TE;
 8000254:	4b07      	ldr	r3, [pc, #28]	; (8000274 <uart_tx_init+0xc0>)
 8000256:	2208      	movs	r2, #8
 8000258:	601a      	str	r2, [r3, #0]
	/* Enable UART module*/
		set_bit(USART1->CR1,CR1_UE);
 800025a:	4b06      	ldr	r3, [pc, #24]	; (8000274 <uart_tx_init+0xc0>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a05      	ldr	r2, [pc, #20]	; (8000274 <uart_tx_init+0xc0>)
 8000260:	f043 0301 	orr.w	r3, r3, #1
 8000264:	6013      	str	r3, [r2, #0]


}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	48000400 	.word	0x48000400
 8000270:	00f42400 	.word	0x00f42400
 8000274:	40013800 	.word	0x40013800

08000278 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]

	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	085a      	lsrs	r2, r3, #1
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	441a      	add	r2, r3
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000290:	b29b      	uxth	r3, r3

}
 8000292:	4618      	mov	r0, r3
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 80002a8:	6879      	ldr	r1, [r7, #4]
 80002aa:	68b8      	ldr	r0, [r7, #8]
 80002ac:	f7ff ffe4 	bl	8000278 <compute_uart_bd>
 80002b0:	4603      	mov	r3, r0
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	60da      	str	r2, [r3, #12]

}
 80002b8:	bf00      	nop
 80002ba:	3710      	adds	r7, #16
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <uart1_write>:

void uart1_write(int ch){
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	/*certifique-se de que o registro de dados de transmissão esteja vazio*/
	while(!(USART1->ISR & ISR_TXE)){
 80002c8:	bf00      	nop
 80002ca:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <uart1_write+0x28>)
 80002cc:	69db      	ldr	r3, [r3, #28]
 80002ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f9      	beq.n	80002ca <uart1_write+0xa>

	}

	/*Escrever oq esta no registrador*/
	USART1->TDR = (ch & 0xFF);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a03      	ldr	r2, [pc, #12]	; (80002e8 <uart1_write+0x28>)
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	6293      	str	r3, [r2, #40]	; 0x28

}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	40013800 	.word	0x40013800

080002ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ec:	480d      	ldr	r0, [pc, #52]	; (8000324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f4:	480c      	ldr	r0, [pc, #48]	; (8000328 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f6:	490d      	ldr	r1, [pc, #52]	; (800032c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <LoopForever+0xe>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002fc:	e002      	b.n	8000304 <LoopCopyDataInit>

080002fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000302:	3304      	adds	r3, #4

08000304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000308:	d3f9      	bcc.n	80002fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800030c:	4c0a      	ldr	r4, [pc, #40]	; (8000338 <LoopForever+0x16>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000310:	e001      	b.n	8000316 <LoopFillZerobss>

08000312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000314:	3204      	adds	r2, #4

08000316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000318:	d3fb      	bcc.n	8000312 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031a:	f000 f811 	bl	8000340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031e:	f7ff ff2b 	bl	8000178 <main>

08000322 <LoopForever>:

LoopForever:
  b LoopForever
 8000322:	e7fe      	b.n	8000322 <LoopForever>
  ldr   r0, =_estack
 8000324:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800032c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000330:	080003a8 	.word	0x080003a8
  ldr r2, =_sbss
 8000334:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000338:	2000001c 	.word	0x2000001c

0800033c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800033c:	e7fe      	b.n	800033c <ADC_IRQHandler>
	...

08000340 <__libc_init_array>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	4d0d      	ldr	r5, [pc, #52]	; (8000378 <__libc_init_array+0x38>)
 8000344:	4c0d      	ldr	r4, [pc, #52]	; (800037c <__libc_init_array+0x3c>)
 8000346:	1b64      	subs	r4, r4, r5
 8000348:	10a4      	asrs	r4, r4, #2
 800034a:	2600      	movs	r6, #0
 800034c:	42a6      	cmp	r6, r4
 800034e:	d109      	bne.n	8000364 <__libc_init_array+0x24>
 8000350:	4d0b      	ldr	r5, [pc, #44]	; (8000380 <__libc_init_array+0x40>)
 8000352:	4c0c      	ldr	r4, [pc, #48]	; (8000384 <__libc_init_array+0x44>)
 8000354:	f000 f818 	bl	8000388 <_init>
 8000358:	1b64      	subs	r4, r4, r5
 800035a:	10a4      	asrs	r4, r4, #2
 800035c:	2600      	movs	r6, #0
 800035e:	42a6      	cmp	r6, r4
 8000360:	d105      	bne.n	800036e <__libc_init_array+0x2e>
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f855 3b04 	ldr.w	r3, [r5], #4
 8000368:	4798      	blx	r3
 800036a:	3601      	adds	r6, #1
 800036c:	e7ee      	b.n	800034c <__libc_init_array+0xc>
 800036e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000372:	4798      	blx	r3
 8000374:	3601      	adds	r6, #1
 8000376:	e7f2      	b.n	800035e <__libc_init_array+0x1e>
 8000378:	080003a0 	.word	0x080003a0
 800037c:	080003a0 	.word	0x080003a0
 8000380:	080003a0 	.word	0x080003a0
 8000384:	080003a4 	.word	0x080003a4

08000388 <_init>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr

08000394 <_fini>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr
