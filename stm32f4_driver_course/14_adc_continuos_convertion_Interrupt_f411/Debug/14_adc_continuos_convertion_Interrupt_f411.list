
14_adc_continuos_convertion_Interrupt_f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000147c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800161c  0800161c  0001161c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016cc  080016cc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080016cc  080016cc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016cc  080016cc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016cc  080016cc  000116cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016d0  080016d0  000116d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080016d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000064  08001738  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001738  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001738  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000069d  00000000  00000000  000217cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00021e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  00022020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb74  00000000  00000000  00022178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fe9  00000000  00000000  00031cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000559eb  00000000  00000000  00033cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000896c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d20  00000000  00000000  00089710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001604 	.word	0x08001604

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001604 	.word	0x08001604

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <pa1_adc_Interrupt_init>:

#define CR2_CONT			(1U<<1)
#define CR1_EOCIE			(1U<<5)

void pa1_adc_Interrupt_init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0

	/*** Configurar a GPIO para usar o ADC1 ***/

	/* Habilitar o acesso do clock ao GPIOA */
	RCC->APB1ENR |= GPIOAEN;
 80002c0:	4b17      	ldr	r3, [pc, #92]	; (8000320 <pa1_adc_Interrupt_init+0x64>)
 80002c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c4:	4a16      	ldr	r2, [pc, #88]	; (8000320 <pa1_adc_Interrupt_init+0x64>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6413      	str	r3, [r2, #64]	; 0x40

	/*Definir o Pino A1 como analogico*/

	GPIOA->MODER |= PA1_MODER_ANALOG_0;
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <pa1_adc_Interrupt_init+0x68>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a14      	ldr	r2, [pc, #80]	; (8000324 <pa1_adc_Interrupt_init+0x68>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= PA1_MODER_ANALOG_1;
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <pa1_adc_Interrupt_init+0x68>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a11      	ldr	r2, [pc, #68]	; (8000324 <pa1_adc_Interrupt_init+0x68>)
 80002de:	f043 0308 	orr.w	r3, r3, #8
 80002e2:	6013      	str	r3, [r2, #0]

	/*** Configurar o modulo ADC1 ***/

	/* Habilitar o acesso ao clock para o ADC1*/
	RCC->APB2ENR |= ADC1EN;
 80002e4:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <pa1_adc_Interrupt_init+0x64>)
 80002e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <pa1_adc_Interrupt_init+0x64>)
 80002ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ee:	6453      	str	r3, [r2, #68]	; 0x44
	//Habilitar  ADC end of conversion interrupt
	ADC1->CR1 |= CR1_EOCIE;
 80002f0:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <pa1_adc_Interrupt_init+0x6c>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <pa1_adc_Interrupt_init+0x6c>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6053      	str	r3, [r2, #4]

	//habilitar a interrrupção do ADC no NVIC

	NVIC_EnableIRQ(ADC_IRQn);
 80002fc:	2012      	movs	r0, #18
 80002fe:	f7ff ffbf 	bl	8000280 <__NVIC_EnableIRQ>

	/* Configurar os paramentros do ADC*/
	/*Configurar a inicio da sequencia de converçãp*/

	ADC1->SQR3 = ADC_CH1;
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <pa1_adc_Interrupt_init+0x6c>)
 8000304:	2201      	movs	r2, #1
 8000306:	635a      	str	r2, [r3, #52]	; 0x34
	/*Configurar o comprimento da sequencia de amostragem*/
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <pa1_adc_Interrupt_init+0x6c>)
 800030a:	2200      	movs	r2, #0
 800030c:	62da      	str	r2, [r3, #44]	; 0x2c
	/*Habiitar o modulo ADC*/
	ADC1->CR2 |= CR2_ADON;
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <pa1_adc_Interrupt_init+0x6c>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	4a05      	ldr	r2, [pc, #20]	; (8000328 <pa1_adc_Interrupt_init+0x6c>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6093      	str	r3, [r2, #8]


}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020000 	.word	0x40020000
 8000328:	40012000 	.word	0x40012000

0800032c <start_convertion>:
	ADC1->CR2 |= CR2_ADON;


}

void start_convertion(void){
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	/*Habilitar o modo de conversão contínua*/
	ADC1->CR2 |= CR2_CONT;
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <start_convertion+0x28>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <start_convertion+0x28>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6093      	str	r3, [r2, #8]

	/*Start ADC convertion*/
	ADC1->CR2 |= CR2_SWSTART;
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <start_convertion+0x28>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <start_convertion+0x28>)
 8000342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000346:	6093      	str	r3, [r2, #8]

}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40012000 	.word	0x40012000

08000358 <main>:

#define tog_bit(Y,bit_x) (Y^=(1<<bit_x))

uint32_t sensor_value;
static void ADC_callback(void);
int main(void){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

	uart2_tx_init();
 800035c:	f000 f8de 	bl	800051c <uart2_tx_init>
	pa1_adc_Interrupt_init();
 8000360:	f7ff ffac 	bl	80002bc <pa1_adc_Interrupt_init>
	start_convertion();
 8000364:	f7ff ffe2 	bl	800032c <start_convertion>


	while(1){
 8000368:	e7fe      	b.n	8000368 <main+0x10>
	...

0800036c <ADC_callback>:

	}
}

static void ADC_callback(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	sensor_value = ADC1->DR;
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <ADC_callback+0x1c>)
 8000372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000374:	4a05      	ldr	r2, [pc, #20]	; (800038c <ADC_callback+0x20>)
 8000376:	6013      	str	r3, [r2, #0]
	printf("sensor value is: %ld \n\r", sensor_value);
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <ADC_callback+0x20>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4619      	mov	r1, r3
 800037e:	4804      	ldr	r0, [pc, #16]	; (8000390 <ADC_callback+0x24>)
 8000380:	f000 f9b2 	bl	80006e8 <iprintf>
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40012000 	.word	0x40012000
 800038c:	20000080 	.word	0x20000080
 8000390:	0800161c 	.word	0x0800161c

08000394 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	if((ADC1->SR & SR_EOC)!=0)
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <ADC_IRQHandler+0x24>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f003 0302 	and.w	r3, r3, #2
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d007      	beq.n	80003b4 <ADC_IRQHandler+0x20>
	{
		//Limpar o EOC
		ADC1->SR &= ~(SR_EOC);
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <ADC_IRQHandler+0x24>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a03      	ldr	r2, [pc, #12]	; (80003b8 <ADC_IRQHandler+0x24>)
 80003aa:	f023 0302 	bic.w	r3, r3, #2
 80003ae:	6013      	str	r3, [r2, #0]

		ADC_callback();
 80003b0:	f7ff ffdc 	bl	800036c <ADC_callback>
	}
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40012000 	.word	0x40012000

080003bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	e00a      	b.n	80003e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003ce:	f3af 8000 	nop.w
 80003d2:	4601      	mov	r1, r0
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	1c5a      	adds	r2, r3, #1
 80003d8:	60ba      	str	r2, [r7, #8]
 80003da:	b2ca      	uxtb	r2, r1
 80003dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	3301      	adds	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	dbf0      	blt.n	80003ce <_read+0x12>
  }

  return len;
 80003ec:	687b      	ldr	r3, [r7, #4]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b086      	sub	sp, #24
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	60f8      	str	r0, [r7, #12]
 80003fe:	60b9      	str	r1, [r7, #8]
 8000400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	e009      	b.n	800041c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	60ba      	str	r2, [r7, #8]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4618      	mov	r0, r3
 8000412:	f000 f877 	bl	8000504 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	3301      	adds	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	429a      	cmp	r2, r3
 8000422:	dbf1      	blt.n	8000408 <_write+0x12>
  }
  return len;
 8000424:	687b      	ldr	r3, [r7, #4]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <_close>:

int _close(int file)
{
 800042e:	b480      	push	{r7}
 8000430:	b083      	sub	sp, #12
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000456:	605a      	str	r2, [r3, #4]
  return 0;
 8000458:	2300      	movs	r3, #0
}
 800045a:	4618      	mov	r0, r3
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <_isatty>:

int _isatty(int file)
{
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a0:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <_sbrk+0x5c>)
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <_sbrk+0x60>)
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <_sbrk+0x64>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <_sbrk+0x68>)
 80004b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <_sbrk+0x64>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	693a      	ldr	r2, [r7, #16]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d207      	bcs.n	80004d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c8:	f000 f8dc 	bl	8000684 <__errno>
 80004cc:	4603      	mov	r3, r0
 80004ce:	220c      	movs	r2, #12
 80004d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295
 80004d6:	e009      	b.n	80004ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <_sbrk+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <_sbrk+0x64>)
 80004e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20020000 	.word	0x20020000
 80004f8:	00000400 	.word	0x00000400
 80004fc:	20000084 	.word	0x20000084
 8000500:	20000098 	.word	0x20000098

08000504 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);

void uart2_write(int ch);

int __io_putchar(int ch)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f000 f877 	bl	8000600 <uart2_write>
	return ch;
 8000512:	687b      	ldr	r3, [r7, #4]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <uart2_tx_init>:

}



void uart2_tx_init(void){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	/*--Configurar o pino PA2 para usar a UART--*/
	/*Habilita o clock à GPIOA*/

		set_bit(RCC->AHB1ENR,GPIOAEN);
 8000520:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <uart2_tx_init+0x88>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <uart2_tx_init+0x88>)
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Definir o pino PA2 com ALTERNATE FUNCTION MODE */
		set_bit(GPIOA->MODER,MODER_PA2_1);
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <uart2_tx_init+0x8c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a1d      	ldr	r2, [pc, #116]	; (80005a8 <uart2_tx_init+0x8c>)
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	6013      	str	r3, [r2, #0]
		clr_bit(GPIOA->MODER,MODER_PA2_0);
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <uart2_tx_init+0x8c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a1a      	ldr	r2, [pc, #104]	; (80005a8 <uart2_tx_init+0x8c>)
 800053e:	f023 0310 	bic.w	r3, r3, #16
 8000542:	6013      	str	r3, [r2, #0]


	/*Definir o pino PA2 como alternate function type uart_tx (AF7)*/
		set_bit(GPIOA->AFR[0],AP2_AF7_0);
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <uart2_tx_init+0x8c>)
 8000546:	6a1b      	ldr	r3, [r3, #32]
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <uart2_tx_init+0x8c>)
 800054a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054e:	6213      	str	r3, [r2, #32]
		set_bit(GPIOA->AFR[0],AP2_AF7_1);
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <uart2_tx_init+0x8c>)
 8000552:	6a1b      	ldr	r3, [r3, #32]
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <uart2_tx_init+0x8c>)
 8000556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055a:	6213      	str	r3, [r2, #32]
		set_bit(GPIOA->AFR[0],AP2_AF7_2);
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <uart2_tx_init+0x8c>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <uart2_tx_init+0x8c>)
 8000562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000566:	6213      	str	r3, [r2, #32]
		clr_bit(GPIOA->AFR[0],AP2_AF7_3);
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <uart2_tx_init+0x8c>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <uart2_tx_init+0x8c>)
 800056e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000572:	6213      	str	r3, [r2, #32]
	/*--Configurar o módulo UART--*/

	/*Habilita o clock à USART1*/
		set_bit(RCC->APB1ENR,USART2EN);
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <uart2_tx_init+0x88>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <uart2_tx_init+0x88>)
 800057a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
	/*Define o Baudrate*/
		uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000584:	4909      	ldr	r1, [pc, #36]	; (80005ac <uart2_tx_init+0x90>)
 8000586:	480a      	ldr	r0, [pc, #40]	; (80005b0 <uart2_tx_init+0x94>)
 8000588:	f000 f827 	bl	80005da <uart_set_baudrate>
	/* Configurar a direção de transferência*/
		USART2->CR1=CR1_TE;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <uart2_tx_init+0x94>)
 800058e:	2208      	movs	r2, #8
 8000590:	60da      	str	r2, [r3, #12]
	/* Enable UART module*/
		set_bit(USART2->CR1,CR1_UE);
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <uart2_tx_init+0x94>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <uart2_tx_init+0x94>)
 8000598:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800059c:	60d3      	str	r3, [r2, #12]


}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020000 	.word	0x40020000
 80005ac:	00f42400 	.word	0x00f42400
 80005b0:	40004400 	.word	0x40004400

080005b4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]

	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	085a      	lsrs	r2, r3, #1
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	441a      	add	r2, r3
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005cc:	b29b      	uxth	r3, r3

}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	68b8      	ldr	r0, [r7, #8]
 80005ea:	f7ff ffe3 	bl	80005b4 <compute_uart_bd>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	609a      	str	r2, [r3, #8]

}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <uart2_write>:
	while(!(USART2->SR & SR_RXNE)){
		}
	return USART2->DR;
}

void uart2_write(int ch){
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	/*certifique-se de que o registro de dados de transmissão esteja vazio*/
	while(!(USART2->SR & SR_TXE)){
 8000608:	bf00      	nop
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <uart2_write+0x2c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f9      	beq.n	800060a <uart2_write+0xa>

	}

	/*Escrever oq esta no registrador*/
	USART2->DR = (ch & 0xFF);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <uart2_write+0x2c>)
 800061a:	b2db      	uxtb	r3, r3
 800061c:	6053      	str	r3, [r2, #4]

}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40004400 	.word	0x40004400

08000630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000632:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000634:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <LoopForever+0x6>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <LoopForever+0xe>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	; (800067c <LoopForever+0x16>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800065e:	f000 f817 	bl	8000690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff fe79 	bl	8000358 <main>

08000666 <LoopForever>:

LoopForever:
  b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   r0, =_estack
 8000668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000674:	080016d4 	.word	0x080016d4
  ldr r2, =_sbss
 8000678:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800067c:	20000098 	.word	0x20000098

08000680 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <BusFault_Handler>
	...

08000684 <__errno>:
 8000684:	4b01      	ldr	r3, [pc, #4]	; (800068c <__errno+0x8>)
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000

08000690 <__libc_init_array>:
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	4d0d      	ldr	r5, [pc, #52]	; (80006c8 <__libc_init_array+0x38>)
 8000694:	4c0d      	ldr	r4, [pc, #52]	; (80006cc <__libc_init_array+0x3c>)
 8000696:	1b64      	subs	r4, r4, r5
 8000698:	10a4      	asrs	r4, r4, #2
 800069a:	2600      	movs	r6, #0
 800069c:	42a6      	cmp	r6, r4
 800069e:	d109      	bne.n	80006b4 <__libc_init_array+0x24>
 80006a0:	4d0b      	ldr	r5, [pc, #44]	; (80006d0 <__libc_init_array+0x40>)
 80006a2:	4c0c      	ldr	r4, [pc, #48]	; (80006d4 <__libc_init_array+0x44>)
 80006a4:	f000 ffae 	bl	8001604 <_init>
 80006a8:	1b64      	subs	r4, r4, r5
 80006aa:	10a4      	asrs	r4, r4, #2
 80006ac:	2600      	movs	r6, #0
 80006ae:	42a6      	cmp	r6, r4
 80006b0:	d105      	bne.n	80006be <__libc_init_array+0x2e>
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b8:	4798      	blx	r3
 80006ba:	3601      	adds	r6, #1
 80006bc:	e7ee      	b.n	800069c <__libc_init_array+0xc>
 80006be:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c2:	4798      	blx	r3
 80006c4:	3601      	adds	r6, #1
 80006c6:	e7f2      	b.n	80006ae <__libc_init_array+0x1e>
 80006c8:	080016cc 	.word	0x080016cc
 80006cc:	080016cc 	.word	0x080016cc
 80006d0:	080016cc 	.word	0x080016cc
 80006d4:	080016d0 	.word	0x080016d0

080006d8 <memset>:
 80006d8:	4402      	add	r2, r0
 80006da:	4603      	mov	r3, r0
 80006dc:	4293      	cmp	r3, r2
 80006de:	d100      	bne.n	80006e2 <memset+0xa>
 80006e0:	4770      	bx	lr
 80006e2:	f803 1b01 	strb.w	r1, [r3], #1
 80006e6:	e7f9      	b.n	80006dc <memset+0x4>

080006e8 <iprintf>:
 80006e8:	b40f      	push	{r0, r1, r2, r3}
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <iprintf+0x2c>)
 80006ec:	b513      	push	{r0, r1, r4, lr}
 80006ee:	681c      	ldr	r4, [r3, #0]
 80006f0:	b124      	cbz	r4, 80006fc <iprintf+0x14>
 80006f2:	69a3      	ldr	r3, [r4, #24]
 80006f4:	b913      	cbnz	r3, 80006fc <iprintf+0x14>
 80006f6:	4620      	mov	r0, r4
 80006f8:	f000 f866 	bl	80007c8 <__sinit>
 80006fc:	ab05      	add	r3, sp, #20
 80006fe:	9a04      	ldr	r2, [sp, #16]
 8000700:	68a1      	ldr	r1, [r4, #8]
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	4620      	mov	r0, r4
 8000706:	f000 f9bd 	bl	8000a84 <_vfiprintf_r>
 800070a:	b002      	add	sp, #8
 800070c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000710:	b004      	add	sp, #16
 8000712:	4770      	bx	lr
 8000714:	20000000 	.word	0x20000000

08000718 <std>:
 8000718:	2300      	movs	r3, #0
 800071a:	b510      	push	{r4, lr}
 800071c:	4604      	mov	r4, r0
 800071e:	e9c0 3300 	strd	r3, r3, [r0]
 8000722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000726:	6083      	str	r3, [r0, #8]
 8000728:	8181      	strh	r1, [r0, #12]
 800072a:	6643      	str	r3, [r0, #100]	; 0x64
 800072c:	81c2      	strh	r2, [r0, #14]
 800072e:	6183      	str	r3, [r0, #24]
 8000730:	4619      	mov	r1, r3
 8000732:	2208      	movs	r2, #8
 8000734:	305c      	adds	r0, #92	; 0x5c
 8000736:	f7ff ffcf 	bl	80006d8 <memset>
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <std+0x38>)
 800073c:	6263      	str	r3, [r4, #36]	; 0x24
 800073e:	4b05      	ldr	r3, [pc, #20]	; (8000754 <std+0x3c>)
 8000740:	62a3      	str	r3, [r4, #40]	; 0x28
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <std+0x40>)
 8000744:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <std+0x44>)
 8000748:	6224      	str	r4, [r4, #32]
 800074a:	6323      	str	r3, [r4, #48]	; 0x30
 800074c:	bd10      	pop	{r4, pc}
 800074e:	bf00      	nop
 8000750:	0800102d 	.word	0x0800102d
 8000754:	0800104f 	.word	0x0800104f
 8000758:	08001087 	.word	0x08001087
 800075c:	080010ab 	.word	0x080010ab

08000760 <_cleanup_r>:
 8000760:	4901      	ldr	r1, [pc, #4]	; (8000768 <_cleanup_r+0x8>)
 8000762:	f000 b8af 	b.w	80008c4 <_fwalk_reent>
 8000766:	bf00      	nop
 8000768:	08001385 	.word	0x08001385

0800076c <__sfmoreglue>:
 800076c:	b570      	push	{r4, r5, r6, lr}
 800076e:	2268      	movs	r2, #104	; 0x68
 8000770:	1e4d      	subs	r5, r1, #1
 8000772:	4355      	muls	r5, r2
 8000774:	460e      	mov	r6, r1
 8000776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800077a:	f000 f8e5 	bl	8000948 <_malloc_r>
 800077e:	4604      	mov	r4, r0
 8000780:	b140      	cbz	r0, 8000794 <__sfmoreglue+0x28>
 8000782:	2100      	movs	r1, #0
 8000784:	e9c0 1600 	strd	r1, r6, [r0]
 8000788:	300c      	adds	r0, #12
 800078a:	60a0      	str	r0, [r4, #8]
 800078c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000790:	f7ff ffa2 	bl	80006d8 <memset>
 8000794:	4620      	mov	r0, r4
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__sfp_lock_acquire>:
 8000798:	4801      	ldr	r0, [pc, #4]	; (80007a0 <__sfp_lock_acquire+0x8>)
 800079a:	f000 b8b3 	b.w	8000904 <__retarget_lock_acquire_recursive>
 800079e:	bf00      	nop
 80007a0:	20000089 	.word	0x20000089

080007a4 <__sfp_lock_release>:
 80007a4:	4801      	ldr	r0, [pc, #4]	; (80007ac <__sfp_lock_release+0x8>)
 80007a6:	f000 b8ae 	b.w	8000906 <__retarget_lock_release_recursive>
 80007aa:	bf00      	nop
 80007ac:	20000089 	.word	0x20000089

080007b0 <__sinit_lock_acquire>:
 80007b0:	4801      	ldr	r0, [pc, #4]	; (80007b8 <__sinit_lock_acquire+0x8>)
 80007b2:	f000 b8a7 	b.w	8000904 <__retarget_lock_acquire_recursive>
 80007b6:	bf00      	nop
 80007b8:	2000008a 	.word	0x2000008a

080007bc <__sinit_lock_release>:
 80007bc:	4801      	ldr	r0, [pc, #4]	; (80007c4 <__sinit_lock_release+0x8>)
 80007be:	f000 b8a2 	b.w	8000906 <__retarget_lock_release_recursive>
 80007c2:	bf00      	nop
 80007c4:	2000008a 	.word	0x2000008a

080007c8 <__sinit>:
 80007c8:	b510      	push	{r4, lr}
 80007ca:	4604      	mov	r4, r0
 80007cc:	f7ff fff0 	bl	80007b0 <__sinit_lock_acquire>
 80007d0:	69a3      	ldr	r3, [r4, #24]
 80007d2:	b11b      	cbz	r3, 80007dc <__sinit+0x14>
 80007d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d8:	f7ff bff0 	b.w	80007bc <__sinit_lock_release>
 80007dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80007e0:	6523      	str	r3, [r4, #80]	; 0x50
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <__sinit+0x68>)
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <__sinit+0x6c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	bf04      	itt	eq
 80007ee:	2301      	moveq	r3, #1
 80007f0:	61a3      	streq	r3, [r4, #24]
 80007f2:	4620      	mov	r0, r4
 80007f4:	f000 f820 	bl	8000838 <__sfp>
 80007f8:	6060      	str	r0, [r4, #4]
 80007fa:	4620      	mov	r0, r4
 80007fc:	f000 f81c 	bl	8000838 <__sfp>
 8000800:	60a0      	str	r0, [r4, #8]
 8000802:	4620      	mov	r0, r4
 8000804:	f000 f818 	bl	8000838 <__sfp>
 8000808:	2200      	movs	r2, #0
 800080a:	60e0      	str	r0, [r4, #12]
 800080c:	2104      	movs	r1, #4
 800080e:	6860      	ldr	r0, [r4, #4]
 8000810:	f7ff ff82 	bl	8000718 <std>
 8000814:	68a0      	ldr	r0, [r4, #8]
 8000816:	2201      	movs	r2, #1
 8000818:	2109      	movs	r1, #9
 800081a:	f7ff ff7d 	bl	8000718 <std>
 800081e:	68e0      	ldr	r0, [r4, #12]
 8000820:	2202      	movs	r2, #2
 8000822:	2112      	movs	r1, #18
 8000824:	f7ff ff78 	bl	8000718 <std>
 8000828:	2301      	movs	r3, #1
 800082a:	61a3      	str	r3, [r4, #24]
 800082c:	e7d2      	b.n	80007d4 <__sinit+0xc>
 800082e:	bf00      	nop
 8000830:	08001634 	.word	0x08001634
 8000834:	08000761 	.word	0x08000761

08000838 <__sfp>:
 8000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083a:	4607      	mov	r7, r0
 800083c:	f7ff ffac 	bl	8000798 <__sfp_lock_acquire>
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <__sfp+0x84>)
 8000842:	681e      	ldr	r6, [r3, #0]
 8000844:	69b3      	ldr	r3, [r6, #24]
 8000846:	b913      	cbnz	r3, 800084e <__sfp+0x16>
 8000848:	4630      	mov	r0, r6
 800084a:	f7ff ffbd 	bl	80007c8 <__sinit>
 800084e:	3648      	adds	r6, #72	; 0x48
 8000850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000854:	3b01      	subs	r3, #1
 8000856:	d503      	bpl.n	8000860 <__sfp+0x28>
 8000858:	6833      	ldr	r3, [r6, #0]
 800085a:	b30b      	cbz	r3, 80008a0 <__sfp+0x68>
 800085c:	6836      	ldr	r6, [r6, #0]
 800085e:	e7f7      	b.n	8000850 <__sfp+0x18>
 8000860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000864:	b9d5      	cbnz	r5, 800089c <__sfp+0x64>
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <__sfp+0x88>)
 8000868:	60e3      	str	r3, [r4, #12]
 800086a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800086e:	6665      	str	r5, [r4, #100]	; 0x64
 8000870:	f000 f847 	bl	8000902 <__retarget_lock_init_recursive>
 8000874:	f7ff ff96 	bl	80007a4 <__sfp_lock_release>
 8000878:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800087c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000880:	6025      	str	r5, [r4, #0]
 8000882:	61a5      	str	r5, [r4, #24]
 8000884:	2208      	movs	r2, #8
 8000886:	4629      	mov	r1, r5
 8000888:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800088c:	f7ff ff24 	bl	80006d8 <memset>
 8000890:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000898:	4620      	mov	r0, r4
 800089a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800089c:	3468      	adds	r4, #104	; 0x68
 800089e:	e7d9      	b.n	8000854 <__sfp+0x1c>
 80008a0:	2104      	movs	r1, #4
 80008a2:	4638      	mov	r0, r7
 80008a4:	f7ff ff62 	bl	800076c <__sfmoreglue>
 80008a8:	4604      	mov	r4, r0
 80008aa:	6030      	str	r0, [r6, #0]
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d1d5      	bne.n	800085c <__sfp+0x24>
 80008b0:	f7ff ff78 	bl	80007a4 <__sfp_lock_release>
 80008b4:	230c      	movs	r3, #12
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	e7ee      	b.n	8000898 <__sfp+0x60>
 80008ba:	bf00      	nop
 80008bc:	08001634 	.word	0x08001634
 80008c0:	ffff0001 	.word	0xffff0001

080008c4 <_fwalk_reent>:
 80008c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008c8:	4606      	mov	r6, r0
 80008ca:	4688      	mov	r8, r1
 80008cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80008d0:	2700      	movs	r7, #0
 80008d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008d6:	f1b9 0901 	subs.w	r9, r9, #1
 80008da:	d505      	bpl.n	80008e8 <_fwalk_reent+0x24>
 80008dc:	6824      	ldr	r4, [r4, #0]
 80008de:	2c00      	cmp	r4, #0
 80008e0:	d1f7      	bne.n	80008d2 <_fwalk_reent+0xe>
 80008e2:	4638      	mov	r0, r7
 80008e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008e8:	89ab      	ldrh	r3, [r5, #12]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d907      	bls.n	80008fe <_fwalk_reent+0x3a>
 80008ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008f2:	3301      	adds	r3, #1
 80008f4:	d003      	beq.n	80008fe <_fwalk_reent+0x3a>
 80008f6:	4629      	mov	r1, r5
 80008f8:	4630      	mov	r0, r6
 80008fa:	47c0      	blx	r8
 80008fc:	4307      	orrs	r7, r0
 80008fe:	3568      	adds	r5, #104	; 0x68
 8000900:	e7e9      	b.n	80008d6 <_fwalk_reent+0x12>

08000902 <__retarget_lock_init_recursive>:
 8000902:	4770      	bx	lr

08000904 <__retarget_lock_acquire_recursive>:
 8000904:	4770      	bx	lr

08000906 <__retarget_lock_release_recursive>:
 8000906:	4770      	bx	lr

08000908 <sbrk_aligned>:
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	4e0e      	ldr	r6, [pc, #56]	; (8000944 <sbrk_aligned+0x3c>)
 800090c:	460c      	mov	r4, r1
 800090e:	6831      	ldr	r1, [r6, #0]
 8000910:	4605      	mov	r5, r0
 8000912:	b911      	cbnz	r1, 800091a <sbrk_aligned+0x12>
 8000914:	f000 fb7a 	bl	800100c <_sbrk_r>
 8000918:	6030      	str	r0, [r6, #0]
 800091a:	4621      	mov	r1, r4
 800091c:	4628      	mov	r0, r5
 800091e:	f000 fb75 	bl	800100c <_sbrk_r>
 8000922:	1c43      	adds	r3, r0, #1
 8000924:	d00a      	beq.n	800093c <sbrk_aligned+0x34>
 8000926:	1cc4      	adds	r4, r0, #3
 8000928:	f024 0403 	bic.w	r4, r4, #3
 800092c:	42a0      	cmp	r0, r4
 800092e:	d007      	beq.n	8000940 <sbrk_aligned+0x38>
 8000930:	1a21      	subs	r1, r4, r0
 8000932:	4628      	mov	r0, r5
 8000934:	f000 fb6a 	bl	800100c <_sbrk_r>
 8000938:	3001      	adds	r0, #1
 800093a:	d101      	bne.n	8000940 <sbrk_aligned+0x38>
 800093c:	f04f 34ff 	mov.w	r4, #4294967295
 8000940:	4620      	mov	r0, r4
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	20000090 	.word	0x20000090

08000948 <_malloc_r>:
 8000948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800094c:	1ccd      	adds	r5, r1, #3
 800094e:	f025 0503 	bic.w	r5, r5, #3
 8000952:	3508      	adds	r5, #8
 8000954:	2d0c      	cmp	r5, #12
 8000956:	bf38      	it	cc
 8000958:	250c      	movcc	r5, #12
 800095a:	2d00      	cmp	r5, #0
 800095c:	4607      	mov	r7, r0
 800095e:	db01      	blt.n	8000964 <_malloc_r+0x1c>
 8000960:	42a9      	cmp	r1, r5
 8000962:	d905      	bls.n	8000970 <_malloc_r+0x28>
 8000964:	230c      	movs	r3, #12
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	2600      	movs	r6, #0
 800096a:	4630      	mov	r0, r6
 800096c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000970:	4e2e      	ldr	r6, [pc, #184]	; (8000a2c <_malloc_r+0xe4>)
 8000972:	f000 fdbb 	bl	80014ec <__malloc_lock>
 8000976:	6833      	ldr	r3, [r6, #0]
 8000978:	461c      	mov	r4, r3
 800097a:	bb34      	cbnz	r4, 80009ca <_malloc_r+0x82>
 800097c:	4629      	mov	r1, r5
 800097e:	4638      	mov	r0, r7
 8000980:	f7ff ffc2 	bl	8000908 <sbrk_aligned>
 8000984:	1c43      	adds	r3, r0, #1
 8000986:	4604      	mov	r4, r0
 8000988:	d14d      	bne.n	8000a26 <_malloc_r+0xde>
 800098a:	6834      	ldr	r4, [r6, #0]
 800098c:	4626      	mov	r6, r4
 800098e:	2e00      	cmp	r6, #0
 8000990:	d140      	bne.n	8000a14 <_malloc_r+0xcc>
 8000992:	6823      	ldr	r3, [r4, #0]
 8000994:	4631      	mov	r1, r6
 8000996:	4638      	mov	r0, r7
 8000998:	eb04 0803 	add.w	r8, r4, r3
 800099c:	f000 fb36 	bl	800100c <_sbrk_r>
 80009a0:	4580      	cmp	r8, r0
 80009a2:	d13a      	bne.n	8000a1a <_malloc_r+0xd2>
 80009a4:	6821      	ldr	r1, [r4, #0]
 80009a6:	3503      	adds	r5, #3
 80009a8:	1a6d      	subs	r5, r5, r1
 80009aa:	f025 0503 	bic.w	r5, r5, #3
 80009ae:	3508      	adds	r5, #8
 80009b0:	2d0c      	cmp	r5, #12
 80009b2:	bf38      	it	cc
 80009b4:	250c      	movcc	r5, #12
 80009b6:	4629      	mov	r1, r5
 80009b8:	4638      	mov	r0, r7
 80009ba:	f7ff ffa5 	bl	8000908 <sbrk_aligned>
 80009be:	3001      	adds	r0, #1
 80009c0:	d02b      	beq.n	8000a1a <_malloc_r+0xd2>
 80009c2:	6823      	ldr	r3, [r4, #0]
 80009c4:	442b      	add	r3, r5
 80009c6:	6023      	str	r3, [r4, #0]
 80009c8:	e00e      	b.n	80009e8 <_malloc_r+0xa0>
 80009ca:	6822      	ldr	r2, [r4, #0]
 80009cc:	1b52      	subs	r2, r2, r5
 80009ce:	d41e      	bmi.n	8000a0e <_malloc_r+0xc6>
 80009d0:	2a0b      	cmp	r2, #11
 80009d2:	d916      	bls.n	8000a02 <_malloc_r+0xba>
 80009d4:	1961      	adds	r1, r4, r5
 80009d6:	42a3      	cmp	r3, r4
 80009d8:	6025      	str	r5, [r4, #0]
 80009da:	bf18      	it	ne
 80009dc:	6059      	strne	r1, [r3, #4]
 80009de:	6863      	ldr	r3, [r4, #4]
 80009e0:	bf08      	it	eq
 80009e2:	6031      	streq	r1, [r6, #0]
 80009e4:	5162      	str	r2, [r4, r5]
 80009e6:	604b      	str	r3, [r1, #4]
 80009e8:	4638      	mov	r0, r7
 80009ea:	f104 060b 	add.w	r6, r4, #11
 80009ee:	f000 fd83 	bl	80014f8 <__malloc_unlock>
 80009f2:	f026 0607 	bic.w	r6, r6, #7
 80009f6:	1d23      	adds	r3, r4, #4
 80009f8:	1af2      	subs	r2, r6, r3
 80009fa:	d0b6      	beq.n	800096a <_malloc_r+0x22>
 80009fc:	1b9b      	subs	r3, r3, r6
 80009fe:	50a3      	str	r3, [r4, r2]
 8000a00:	e7b3      	b.n	800096a <_malloc_r+0x22>
 8000a02:	6862      	ldr	r2, [r4, #4]
 8000a04:	42a3      	cmp	r3, r4
 8000a06:	bf0c      	ite	eq
 8000a08:	6032      	streq	r2, [r6, #0]
 8000a0a:	605a      	strne	r2, [r3, #4]
 8000a0c:	e7ec      	b.n	80009e8 <_malloc_r+0xa0>
 8000a0e:	4623      	mov	r3, r4
 8000a10:	6864      	ldr	r4, [r4, #4]
 8000a12:	e7b2      	b.n	800097a <_malloc_r+0x32>
 8000a14:	4634      	mov	r4, r6
 8000a16:	6876      	ldr	r6, [r6, #4]
 8000a18:	e7b9      	b.n	800098e <_malloc_r+0x46>
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4638      	mov	r0, r7
 8000a20:	f000 fd6a 	bl	80014f8 <__malloc_unlock>
 8000a24:	e7a1      	b.n	800096a <_malloc_r+0x22>
 8000a26:	6025      	str	r5, [r4, #0]
 8000a28:	e7de      	b.n	80009e8 <_malloc_r+0xa0>
 8000a2a:	bf00      	nop
 8000a2c:	2000008c 	.word	0x2000008c

08000a30 <__sfputc_r>:
 8000a30:	6893      	ldr	r3, [r2, #8]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	b410      	push	{r4}
 8000a38:	6093      	str	r3, [r2, #8]
 8000a3a:	da08      	bge.n	8000a4e <__sfputc_r+0x1e>
 8000a3c:	6994      	ldr	r4, [r2, #24]
 8000a3e:	42a3      	cmp	r3, r4
 8000a40:	db01      	blt.n	8000a46 <__sfputc_r+0x16>
 8000a42:	290a      	cmp	r1, #10
 8000a44:	d103      	bne.n	8000a4e <__sfputc_r+0x1e>
 8000a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a4a:	f000 bb33 	b.w	80010b4 <__swbuf_r>
 8000a4e:	6813      	ldr	r3, [r2, #0]
 8000a50:	1c58      	adds	r0, r3, #1
 8000a52:	6010      	str	r0, [r2, #0]
 8000a54:	7019      	strb	r1, [r3, #0]
 8000a56:	4608      	mov	r0, r1
 8000a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <__sfputs_r>:
 8000a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a60:	4606      	mov	r6, r0
 8000a62:	460f      	mov	r7, r1
 8000a64:	4614      	mov	r4, r2
 8000a66:	18d5      	adds	r5, r2, r3
 8000a68:	42ac      	cmp	r4, r5
 8000a6a:	d101      	bne.n	8000a70 <__sfputs_r+0x12>
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	e007      	b.n	8000a80 <__sfputs_r+0x22>
 8000a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a74:	463a      	mov	r2, r7
 8000a76:	4630      	mov	r0, r6
 8000a78:	f7ff ffda 	bl	8000a30 <__sfputc_r>
 8000a7c:	1c43      	adds	r3, r0, #1
 8000a7e:	d1f3      	bne.n	8000a68 <__sfputs_r+0xa>
 8000a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a84 <_vfiprintf_r>:
 8000a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a88:	460d      	mov	r5, r1
 8000a8a:	b09d      	sub	sp, #116	; 0x74
 8000a8c:	4614      	mov	r4, r2
 8000a8e:	4698      	mov	r8, r3
 8000a90:	4606      	mov	r6, r0
 8000a92:	b118      	cbz	r0, 8000a9c <_vfiprintf_r+0x18>
 8000a94:	6983      	ldr	r3, [r0, #24]
 8000a96:	b90b      	cbnz	r3, 8000a9c <_vfiprintf_r+0x18>
 8000a98:	f7ff fe96 	bl	80007c8 <__sinit>
 8000a9c:	4b89      	ldr	r3, [pc, #548]	; (8000cc4 <_vfiprintf_r+0x240>)
 8000a9e:	429d      	cmp	r5, r3
 8000aa0:	d11b      	bne.n	8000ada <_vfiprintf_r+0x56>
 8000aa2:	6875      	ldr	r5, [r6, #4]
 8000aa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000aa6:	07d9      	lsls	r1, r3, #31
 8000aa8:	d405      	bmi.n	8000ab6 <_vfiprintf_r+0x32>
 8000aaa:	89ab      	ldrh	r3, [r5, #12]
 8000aac:	059a      	lsls	r2, r3, #22
 8000aae:	d402      	bmi.n	8000ab6 <_vfiprintf_r+0x32>
 8000ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ab2:	f7ff ff27 	bl	8000904 <__retarget_lock_acquire_recursive>
 8000ab6:	89ab      	ldrh	r3, [r5, #12]
 8000ab8:	071b      	lsls	r3, r3, #28
 8000aba:	d501      	bpl.n	8000ac0 <_vfiprintf_r+0x3c>
 8000abc:	692b      	ldr	r3, [r5, #16]
 8000abe:	b9eb      	cbnz	r3, 8000afc <_vfiprintf_r+0x78>
 8000ac0:	4629      	mov	r1, r5
 8000ac2:	4630      	mov	r0, r6
 8000ac4:	f000 fb5a 	bl	800117c <__swsetup_r>
 8000ac8:	b1c0      	cbz	r0, 8000afc <_vfiprintf_r+0x78>
 8000aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000acc:	07dc      	lsls	r4, r3, #31
 8000ace:	d50e      	bpl.n	8000aee <_vfiprintf_r+0x6a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	b01d      	add	sp, #116	; 0x74
 8000ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ada:	4b7b      	ldr	r3, [pc, #492]	; (8000cc8 <_vfiprintf_r+0x244>)
 8000adc:	429d      	cmp	r5, r3
 8000ade:	d101      	bne.n	8000ae4 <_vfiprintf_r+0x60>
 8000ae0:	68b5      	ldr	r5, [r6, #8]
 8000ae2:	e7df      	b.n	8000aa4 <_vfiprintf_r+0x20>
 8000ae4:	4b79      	ldr	r3, [pc, #484]	; (8000ccc <_vfiprintf_r+0x248>)
 8000ae6:	429d      	cmp	r5, r3
 8000ae8:	bf08      	it	eq
 8000aea:	68f5      	ldreq	r5, [r6, #12]
 8000aec:	e7da      	b.n	8000aa4 <_vfiprintf_r+0x20>
 8000aee:	89ab      	ldrh	r3, [r5, #12]
 8000af0:	0598      	lsls	r0, r3, #22
 8000af2:	d4ed      	bmi.n	8000ad0 <_vfiprintf_r+0x4c>
 8000af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000af6:	f7ff ff06 	bl	8000906 <__retarget_lock_release_recursive>
 8000afa:	e7e9      	b.n	8000ad0 <_vfiprintf_r+0x4c>
 8000afc:	2300      	movs	r3, #0
 8000afe:	9309      	str	r3, [sp, #36]	; 0x24
 8000b00:	2320      	movs	r3, #32
 8000b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b0a:	2330      	movs	r3, #48	; 0x30
 8000b0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000cd0 <_vfiprintf_r+0x24c>
 8000b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b14:	f04f 0901 	mov.w	r9, #1
 8000b18:	4623      	mov	r3, r4
 8000b1a:	469a      	mov	sl, r3
 8000b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b20:	b10a      	cbz	r2, 8000b26 <_vfiprintf_r+0xa2>
 8000b22:	2a25      	cmp	r2, #37	; 0x25
 8000b24:	d1f9      	bne.n	8000b1a <_vfiprintf_r+0x96>
 8000b26:	ebba 0b04 	subs.w	fp, sl, r4
 8000b2a:	d00b      	beq.n	8000b44 <_vfiprintf_r+0xc0>
 8000b2c:	465b      	mov	r3, fp
 8000b2e:	4622      	mov	r2, r4
 8000b30:	4629      	mov	r1, r5
 8000b32:	4630      	mov	r0, r6
 8000b34:	f7ff ff93 	bl	8000a5e <__sfputs_r>
 8000b38:	3001      	adds	r0, #1
 8000b3a:	f000 80aa 	beq.w	8000c92 <_vfiprintf_r+0x20e>
 8000b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b40:	445a      	add	r2, fp
 8000b42:	9209      	str	r2, [sp, #36]	; 0x24
 8000b44:	f89a 3000 	ldrb.w	r3, [sl]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f000 80a2 	beq.w	8000c92 <_vfiprintf_r+0x20e>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b58:	f10a 0a01 	add.w	sl, sl, #1
 8000b5c:	9304      	str	r3, [sp, #16]
 8000b5e:	9307      	str	r3, [sp, #28]
 8000b60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b64:	931a      	str	r3, [sp, #104]	; 0x68
 8000b66:	4654      	mov	r4, sl
 8000b68:	2205      	movs	r2, #5
 8000b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b6e:	4858      	ldr	r0, [pc, #352]	; (8000cd0 <_vfiprintf_r+0x24c>)
 8000b70:	f7ff fb36 	bl	80001e0 <memchr>
 8000b74:	9a04      	ldr	r2, [sp, #16]
 8000b76:	b9d8      	cbnz	r0, 8000bb0 <_vfiprintf_r+0x12c>
 8000b78:	06d1      	lsls	r1, r2, #27
 8000b7a:	bf44      	itt	mi
 8000b7c:	2320      	movmi	r3, #32
 8000b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b82:	0713      	lsls	r3, r2, #28
 8000b84:	bf44      	itt	mi
 8000b86:	232b      	movmi	r3, #43	; 0x2b
 8000b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8000b90:	2b2a      	cmp	r3, #42	; 0x2a
 8000b92:	d015      	beq.n	8000bc0 <_vfiprintf_r+0x13c>
 8000b94:	9a07      	ldr	r2, [sp, #28]
 8000b96:	4654      	mov	r4, sl
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f04f 0c0a 	mov.w	ip, #10
 8000b9e:	4621      	mov	r1, r4
 8000ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ba4:	3b30      	subs	r3, #48	; 0x30
 8000ba6:	2b09      	cmp	r3, #9
 8000ba8:	d94e      	bls.n	8000c48 <_vfiprintf_r+0x1c4>
 8000baa:	b1b0      	cbz	r0, 8000bda <_vfiprintf_r+0x156>
 8000bac:	9207      	str	r2, [sp, #28]
 8000bae:	e014      	b.n	8000bda <_vfiprintf_r+0x156>
 8000bb0:	eba0 0308 	sub.w	r3, r0, r8
 8000bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	9304      	str	r3, [sp, #16]
 8000bbc:	46a2      	mov	sl, r4
 8000bbe:	e7d2      	b.n	8000b66 <_vfiprintf_r+0xe2>
 8000bc0:	9b03      	ldr	r3, [sp, #12]
 8000bc2:	1d19      	adds	r1, r3, #4
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	9103      	str	r1, [sp, #12]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	bfbb      	ittet	lt
 8000bcc:	425b      	neglt	r3, r3
 8000bce:	f042 0202 	orrlt.w	r2, r2, #2
 8000bd2:	9307      	strge	r3, [sp, #28]
 8000bd4:	9307      	strlt	r3, [sp, #28]
 8000bd6:	bfb8      	it	lt
 8000bd8:	9204      	strlt	r2, [sp, #16]
 8000bda:	7823      	ldrb	r3, [r4, #0]
 8000bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8000bde:	d10c      	bne.n	8000bfa <_vfiprintf_r+0x176>
 8000be0:	7863      	ldrb	r3, [r4, #1]
 8000be2:	2b2a      	cmp	r3, #42	; 0x2a
 8000be4:	d135      	bne.n	8000c52 <_vfiprintf_r+0x1ce>
 8000be6:	9b03      	ldr	r3, [sp, #12]
 8000be8:	1d1a      	adds	r2, r3, #4
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	9203      	str	r2, [sp, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bfb8      	it	lt
 8000bf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8000bf6:	3402      	adds	r4, #2
 8000bf8:	9305      	str	r3, [sp, #20]
 8000bfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000ce0 <_vfiprintf_r+0x25c>
 8000bfe:	7821      	ldrb	r1, [r4, #0]
 8000c00:	2203      	movs	r2, #3
 8000c02:	4650      	mov	r0, sl
 8000c04:	f7ff faec 	bl	80001e0 <memchr>
 8000c08:	b140      	cbz	r0, 8000c1c <_vfiprintf_r+0x198>
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	eba0 000a 	sub.w	r0, r0, sl
 8000c10:	fa03 f000 	lsl.w	r0, r3, r0
 8000c14:	9b04      	ldr	r3, [sp, #16]
 8000c16:	4303      	orrs	r3, r0
 8000c18:	3401      	adds	r4, #1
 8000c1a:	9304      	str	r3, [sp, #16]
 8000c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c20:	482c      	ldr	r0, [pc, #176]	; (8000cd4 <_vfiprintf_r+0x250>)
 8000c22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c26:	2206      	movs	r2, #6
 8000c28:	f7ff fada 	bl	80001e0 <memchr>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d03f      	beq.n	8000cb0 <_vfiprintf_r+0x22c>
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <_vfiprintf_r+0x254>)
 8000c32:	bb1b      	cbnz	r3, 8000c7c <_vfiprintf_r+0x1f8>
 8000c34:	9b03      	ldr	r3, [sp, #12]
 8000c36:	3307      	adds	r3, #7
 8000c38:	f023 0307 	bic.w	r3, r3, #7
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	9303      	str	r3, [sp, #12]
 8000c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c42:	443b      	add	r3, r7
 8000c44:	9309      	str	r3, [sp, #36]	; 0x24
 8000c46:	e767      	b.n	8000b18 <_vfiprintf_r+0x94>
 8000c48:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c4c:	460c      	mov	r4, r1
 8000c4e:	2001      	movs	r0, #1
 8000c50:	e7a5      	b.n	8000b9e <_vfiprintf_r+0x11a>
 8000c52:	2300      	movs	r3, #0
 8000c54:	3401      	adds	r4, #1
 8000c56:	9305      	str	r3, [sp, #20]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 0c0a 	mov.w	ip, #10
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c64:	3a30      	subs	r2, #48	; 0x30
 8000c66:	2a09      	cmp	r2, #9
 8000c68:	d903      	bls.n	8000c72 <_vfiprintf_r+0x1ee>
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0c5      	beq.n	8000bfa <_vfiprintf_r+0x176>
 8000c6e:	9105      	str	r1, [sp, #20]
 8000c70:	e7c3      	b.n	8000bfa <_vfiprintf_r+0x176>
 8000c72:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c76:	4604      	mov	r4, r0
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e7f0      	b.n	8000c5e <_vfiprintf_r+0x1da>
 8000c7c:	ab03      	add	r3, sp, #12
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	462a      	mov	r2, r5
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <_vfiprintf_r+0x258>)
 8000c84:	a904      	add	r1, sp, #16
 8000c86:	4630      	mov	r0, r6
 8000c88:	f3af 8000 	nop.w
 8000c8c:	4607      	mov	r7, r0
 8000c8e:	1c78      	adds	r0, r7, #1
 8000c90:	d1d6      	bne.n	8000c40 <_vfiprintf_r+0x1bc>
 8000c92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c94:	07d9      	lsls	r1, r3, #31
 8000c96:	d405      	bmi.n	8000ca4 <_vfiprintf_r+0x220>
 8000c98:	89ab      	ldrh	r3, [r5, #12]
 8000c9a:	059a      	lsls	r2, r3, #22
 8000c9c:	d402      	bmi.n	8000ca4 <_vfiprintf_r+0x220>
 8000c9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ca0:	f7ff fe31 	bl	8000906 <__retarget_lock_release_recursive>
 8000ca4:	89ab      	ldrh	r3, [r5, #12]
 8000ca6:	065b      	lsls	r3, r3, #25
 8000ca8:	f53f af12 	bmi.w	8000ad0 <_vfiprintf_r+0x4c>
 8000cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cae:	e711      	b.n	8000ad4 <_vfiprintf_r+0x50>
 8000cb0:	ab03      	add	r3, sp, #12
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	462a      	mov	r2, r5
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <_vfiprintf_r+0x258>)
 8000cb8:	a904      	add	r1, sp, #16
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f000 f880 	bl	8000dc0 <_printf_i>
 8000cc0:	e7e4      	b.n	8000c8c <_vfiprintf_r+0x208>
 8000cc2:	bf00      	nop
 8000cc4:	08001658 	.word	0x08001658
 8000cc8:	08001678 	.word	0x08001678
 8000ccc:	08001638 	.word	0x08001638
 8000cd0:	08001698 	.word	0x08001698
 8000cd4:	080016a2 	.word	0x080016a2
 8000cd8:	00000000 	.word	0x00000000
 8000cdc:	08000a5f 	.word	0x08000a5f
 8000ce0:	0800169e 	.word	0x0800169e

08000ce4 <_printf_common>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	4616      	mov	r6, r2
 8000cea:	4699      	mov	r9, r3
 8000cec:	688a      	ldr	r2, [r1, #8]
 8000cee:	690b      	ldr	r3, [r1, #16]
 8000cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	bfb8      	it	lt
 8000cf8:	4613      	movlt	r3, r2
 8000cfa:	6033      	str	r3, [r6, #0]
 8000cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d00:	4607      	mov	r7, r0
 8000d02:	460c      	mov	r4, r1
 8000d04:	b10a      	cbz	r2, 8000d0a <_printf_common+0x26>
 8000d06:	3301      	adds	r3, #1
 8000d08:	6033      	str	r3, [r6, #0]
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	0699      	lsls	r1, r3, #26
 8000d0e:	bf42      	ittt	mi
 8000d10:	6833      	ldrmi	r3, [r6, #0]
 8000d12:	3302      	addmi	r3, #2
 8000d14:	6033      	strmi	r3, [r6, #0]
 8000d16:	6825      	ldr	r5, [r4, #0]
 8000d18:	f015 0506 	ands.w	r5, r5, #6
 8000d1c:	d106      	bne.n	8000d2c <_printf_common+0x48>
 8000d1e:	f104 0a19 	add.w	sl, r4, #25
 8000d22:	68e3      	ldr	r3, [r4, #12]
 8000d24:	6832      	ldr	r2, [r6, #0]
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	42ab      	cmp	r3, r5
 8000d2a:	dc26      	bgt.n	8000d7a <_printf_common+0x96>
 8000d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d30:	1e13      	subs	r3, r2, #0
 8000d32:	6822      	ldr	r2, [r4, #0]
 8000d34:	bf18      	it	ne
 8000d36:	2301      	movne	r3, #1
 8000d38:	0692      	lsls	r2, r2, #26
 8000d3a:	d42b      	bmi.n	8000d94 <_printf_common+0xb0>
 8000d3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d40:	4649      	mov	r1, r9
 8000d42:	4638      	mov	r0, r7
 8000d44:	47c0      	blx	r8
 8000d46:	3001      	adds	r0, #1
 8000d48:	d01e      	beq.n	8000d88 <_printf_common+0xa4>
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	68e5      	ldr	r5, [r4, #12]
 8000d4e:	6832      	ldr	r2, [r6, #0]
 8000d50:	f003 0306 	and.w	r3, r3, #6
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	bf08      	it	eq
 8000d58:	1aad      	subeq	r5, r5, r2
 8000d5a:	68a3      	ldr	r3, [r4, #8]
 8000d5c:	6922      	ldr	r2, [r4, #16]
 8000d5e:	bf0c      	ite	eq
 8000d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d64:	2500      	movne	r5, #0
 8000d66:	4293      	cmp	r3, r2
 8000d68:	bfc4      	itt	gt
 8000d6a:	1a9b      	subgt	r3, r3, r2
 8000d6c:	18ed      	addgt	r5, r5, r3
 8000d6e:	2600      	movs	r6, #0
 8000d70:	341a      	adds	r4, #26
 8000d72:	42b5      	cmp	r5, r6
 8000d74:	d11a      	bne.n	8000dac <_printf_common+0xc8>
 8000d76:	2000      	movs	r0, #0
 8000d78:	e008      	b.n	8000d8c <_printf_common+0xa8>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	4652      	mov	r2, sl
 8000d7e:	4649      	mov	r1, r9
 8000d80:	4638      	mov	r0, r7
 8000d82:	47c0      	blx	r8
 8000d84:	3001      	adds	r0, #1
 8000d86:	d103      	bne.n	8000d90 <_printf_common+0xac>
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	3501      	adds	r5, #1
 8000d92:	e7c6      	b.n	8000d22 <_printf_common+0x3e>
 8000d94:	18e1      	adds	r1, r4, r3
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	2030      	movs	r0, #48	; 0x30
 8000d9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d9e:	4422      	add	r2, r4
 8000da0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000da8:	3302      	adds	r3, #2
 8000daa:	e7c7      	b.n	8000d3c <_printf_common+0x58>
 8000dac:	2301      	movs	r3, #1
 8000dae:	4622      	mov	r2, r4
 8000db0:	4649      	mov	r1, r9
 8000db2:	4638      	mov	r0, r7
 8000db4:	47c0      	blx	r8
 8000db6:	3001      	adds	r0, #1
 8000db8:	d0e6      	beq.n	8000d88 <_printf_common+0xa4>
 8000dba:	3601      	adds	r6, #1
 8000dbc:	e7d9      	b.n	8000d72 <_printf_common+0x8e>
	...

08000dc0 <_printf_i>:
 8000dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc4:	7e0f      	ldrb	r7, [r1, #24]
 8000dc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000dc8:	2f78      	cmp	r7, #120	; 0x78
 8000dca:	4691      	mov	r9, r2
 8000dcc:	4680      	mov	r8, r0
 8000dce:	460c      	mov	r4, r1
 8000dd0:	469a      	mov	sl, r3
 8000dd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000dd6:	d807      	bhi.n	8000de8 <_printf_i+0x28>
 8000dd8:	2f62      	cmp	r7, #98	; 0x62
 8000dda:	d80a      	bhi.n	8000df2 <_printf_i+0x32>
 8000ddc:	2f00      	cmp	r7, #0
 8000dde:	f000 80d8 	beq.w	8000f92 <_printf_i+0x1d2>
 8000de2:	2f58      	cmp	r7, #88	; 0x58
 8000de4:	f000 80a3 	beq.w	8000f2e <_printf_i+0x16e>
 8000de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000dec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000df0:	e03a      	b.n	8000e68 <_printf_i+0xa8>
 8000df2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000df6:	2b15      	cmp	r3, #21
 8000df8:	d8f6      	bhi.n	8000de8 <_printf_i+0x28>
 8000dfa:	a101      	add	r1, pc, #4	; (adr r1, 8000e00 <_printf_i+0x40>)
 8000dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e00:	08000e59 	.word	0x08000e59
 8000e04:	08000e6d 	.word	0x08000e6d
 8000e08:	08000de9 	.word	0x08000de9
 8000e0c:	08000de9 	.word	0x08000de9
 8000e10:	08000de9 	.word	0x08000de9
 8000e14:	08000de9 	.word	0x08000de9
 8000e18:	08000e6d 	.word	0x08000e6d
 8000e1c:	08000de9 	.word	0x08000de9
 8000e20:	08000de9 	.word	0x08000de9
 8000e24:	08000de9 	.word	0x08000de9
 8000e28:	08000de9 	.word	0x08000de9
 8000e2c:	08000f79 	.word	0x08000f79
 8000e30:	08000e9d 	.word	0x08000e9d
 8000e34:	08000f5b 	.word	0x08000f5b
 8000e38:	08000de9 	.word	0x08000de9
 8000e3c:	08000de9 	.word	0x08000de9
 8000e40:	08000f9b 	.word	0x08000f9b
 8000e44:	08000de9 	.word	0x08000de9
 8000e48:	08000e9d 	.word	0x08000e9d
 8000e4c:	08000de9 	.word	0x08000de9
 8000e50:	08000de9 	.word	0x08000de9
 8000e54:	08000f63 	.word	0x08000f63
 8000e58:	682b      	ldr	r3, [r5, #0]
 8000e5a:	1d1a      	adds	r2, r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	602a      	str	r2, [r5, #0]
 8000e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e0a3      	b.n	8000fb4 <_printf_i+0x1f4>
 8000e6c:	6820      	ldr	r0, [r4, #0]
 8000e6e:	6829      	ldr	r1, [r5, #0]
 8000e70:	0606      	lsls	r6, r0, #24
 8000e72:	f101 0304 	add.w	r3, r1, #4
 8000e76:	d50a      	bpl.n	8000e8e <_printf_i+0xce>
 8000e78:	680e      	ldr	r6, [r1, #0]
 8000e7a:	602b      	str	r3, [r5, #0]
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	da03      	bge.n	8000e88 <_printf_i+0xc8>
 8000e80:	232d      	movs	r3, #45	; 0x2d
 8000e82:	4276      	negs	r6, r6
 8000e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e88:	485e      	ldr	r0, [pc, #376]	; (8001004 <_printf_i+0x244>)
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	e019      	b.n	8000ec2 <_printf_i+0x102>
 8000e8e:	680e      	ldr	r6, [r1, #0]
 8000e90:	602b      	str	r3, [r5, #0]
 8000e92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e96:	bf18      	it	ne
 8000e98:	b236      	sxthne	r6, r6
 8000e9a:	e7ef      	b.n	8000e7c <_printf_i+0xbc>
 8000e9c:	682b      	ldr	r3, [r5, #0]
 8000e9e:	6820      	ldr	r0, [r4, #0]
 8000ea0:	1d19      	adds	r1, r3, #4
 8000ea2:	6029      	str	r1, [r5, #0]
 8000ea4:	0601      	lsls	r1, r0, #24
 8000ea6:	d501      	bpl.n	8000eac <_printf_i+0xec>
 8000ea8:	681e      	ldr	r6, [r3, #0]
 8000eaa:	e002      	b.n	8000eb2 <_printf_i+0xf2>
 8000eac:	0646      	lsls	r6, r0, #25
 8000eae:	d5fb      	bpl.n	8000ea8 <_printf_i+0xe8>
 8000eb0:	881e      	ldrh	r6, [r3, #0]
 8000eb2:	4854      	ldr	r0, [pc, #336]	; (8001004 <_printf_i+0x244>)
 8000eb4:	2f6f      	cmp	r7, #111	; 0x6f
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2308      	moveq	r3, #8
 8000eba:	230a      	movne	r3, #10
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ec2:	6865      	ldr	r5, [r4, #4]
 8000ec4:	60a5      	str	r5, [r4, #8]
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	bfa2      	ittt	ge
 8000eca:	6821      	ldrge	r1, [r4, #0]
 8000ecc:	f021 0104 	bicge.w	r1, r1, #4
 8000ed0:	6021      	strge	r1, [r4, #0]
 8000ed2:	b90e      	cbnz	r6, 8000ed8 <_printf_i+0x118>
 8000ed4:	2d00      	cmp	r5, #0
 8000ed6:	d04d      	beq.n	8000f74 <_printf_i+0x1b4>
 8000ed8:	4615      	mov	r5, r2
 8000eda:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ede:	fb03 6711 	mls	r7, r3, r1, r6
 8000ee2:	5dc7      	ldrb	r7, [r0, r7]
 8000ee4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000ee8:	4637      	mov	r7, r6
 8000eea:	42bb      	cmp	r3, r7
 8000eec:	460e      	mov	r6, r1
 8000eee:	d9f4      	bls.n	8000eda <_printf_i+0x11a>
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d10b      	bne.n	8000f0c <_printf_i+0x14c>
 8000ef4:	6823      	ldr	r3, [r4, #0]
 8000ef6:	07de      	lsls	r6, r3, #31
 8000ef8:	d508      	bpl.n	8000f0c <_printf_i+0x14c>
 8000efa:	6923      	ldr	r3, [r4, #16]
 8000efc:	6861      	ldr	r1, [r4, #4]
 8000efe:	4299      	cmp	r1, r3
 8000f00:	bfde      	ittt	le
 8000f02:	2330      	movle	r3, #48	; 0x30
 8000f04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f0c:	1b52      	subs	r2, r2, r5
 8000f0e:	6122      	str	r2, [r4, #16]
 8000f10:	f8cd a000 	str.w	sl, [sp]
 8000f14:	464b      	mov	r3, r9
 8000f16:	aa03      	add	r2, sp, #12
 8000f18:	4621      	mov	r1, r4
 8000f1a:	4640      	mov	r0, r8
 8000f1c:	f7ff fee2 	bl	8000ce4 <_printf_common>
 8000f20:	3001      	adds	r0, #1
 8000f22:	d14c      	bne.n	8000fbe <_printf_i+0x1fe>
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	b004      	add	sp, #16
 8000f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2e:	4835      	ldr	r0, [pc, #212]	; (8001004 <_printf_i+0x244>)
 8000f30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000f34:	6829      	ldr	r1, [r5, #0]
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f3c:	6029      	str	r1, [r5, #0]
 8000f3e:	061d      	lsls	r5, r3, #24
 8000f40:	d514      	bpl.n	8000f6c <_printf_i+0x1ac>
 8000f42:	07df      	lsls	r7, r3, #31
 8000f44:	bf44      	itt	mi
 8000f46:	f043 0320 	orrmi.w	r3, r3, #32
 8000f4a:	6023      	strmi	r3, [r4, #0]
 8000f4c:	b91e      	cbnz	r6, 8000f56 <_printf_i+0x196>
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	f023 0320 	bic.w	r3, r3, #32
 8000f54:	6023      	str	r3, [r4, #0]
 8000f56:	2310      	movs	r3, #16
 8000f58:	e7b0      	b.n	8000ebc <_printf_i+0xfc>
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	f043 0320 	orr.w	r3, r3, #32
 8000f60:	6023      	str	r3, [r4, #0]
 8000f62:	2378      	movs	r3, #120	; 0x78
 8000f64:	4828      	ldr	r0, [pc, #160]	; (8001008 <_printf_i+0x248>)
 8000f66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f6a:	e7e3      	b.n	8000f34 <_printf_i+0x174>
 8000f6c:	0659      	lsls	r1, r3, #25
 8000f6e:	bf48      	it	mi
 8000f70:	b2b6      	uxthmi	r6, r6
 8000f72:	e7e6      	b.n	8000f42 <_printf_i+0x182>
 8000f74:	4615      	mov	r5, r2
 8000f76:	e7bb      	b.n	8000ef0 <_printf_i+0x130>
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	6826      	ldr	r6, [r4, #0]
 8000f7c:	6961      	ldr	r1, [r4, #20]
 8000f7e:	1d18      	adds	r0, r3, #4
 8000f80:	6028      	str	r0, [r5, #0]
 8000f82:	0635      	lsls	r5, r6, #24
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	d501      	bpl.n	8000f8c <_printf_i+0x1cc>
 8000f88:	6019      	str	r1, [r3, #0]
 8000f8a:	e002      	b.n	8000f92 <_printf_i+0x1d2>
 8000f8c:	0670      	lsls	r0, r6, #25
 8000f8e:	d5fb      	bpl.n	8000f88 <_printf_i+0x1c8>
 8000f90:	8019      	strh	r1, [r3, #0]
 8000f92:	2300      	movs	r3, #0
 8000f94:	6123      	str	r3, [r4, #16]
 8000f96:	4615      	mov	r5, r2
 8000f98:	e7ba      	b.n	8000f10 <_printf_i+0x150>
 8000f9a:	682b      	ldr	r3, [r5, #0]
 8000f9c:	1d1a      	adds	r2, r3, #4
 8000f9e:	602a      	str	r2, [r5, #0]
 8000fa0:	681d      	ldr	r5, [r3, #0]
 8000fa2:	6862      	ldr	r2, [r4, #4]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	f7ff f91a 	bl	80001e0 <memchr>
 8000fac:	b108      	cbz	r0, 8000fb2 <_printf_i+0x1f2>
 8000fae:	1b40      	subs	r0, r0, r5
 8000fb0:	6060      	str	r0, [r4, #4]
 8000fb2:	6863      	ldr	r3, [r4, #4]
 8000fb4:	6123      	str	r3, [r4, #16]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fbc:	e7a8      	b.n	8000f10 <_printf_i+0x150>
 8000fbe:	6923      	ldr	r3, [r4, #16]
 8000fc0:	462a      	mov	r2, r5
 8000fc2:	4649      	mov	r1, r9
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	47d0      	blx	sl
 8000fc8:	3001      	adds	r0, #1
 8000fca:	d0ab      	beq.n	8000f24 <_printf_i+0x164>
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	079b      	lsls	r3, r3, #30
 8000fd0:	d413      	bmi.n	8000ffa <_printf_i+0x23a>
 8000fd2:	68e0      	ldr	r0, [r4, #12]
 8000fd4:	9b03      	ldr	r3, [sp, #12]
 8000fd6:	4298      	cmp	r0, r3
 8000fd8:	bfb8      	it	lt
 8000fda:	4618      	movlt	r0, r3
 8000fdc:	e7a4      	b.n	8000f28 <_printf_i+0x168>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	4632      	mov	r2, r6
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	47d0      	blx	sl
 8000fe8:	3001      	adds	r0, #1
 8000fea:	d09b      	beq.n	8000f24 <_printf_i+0x164>
 8000fec:	3501      	adds	r5, #1
 8000fee:	68e3      	ldr	r3, [r4, #12]
 8000ff0:	9903      	ldr	r1, [sp, #12]
 8000ff2:	1a5b      	subs	r3, r3, r1
 8000ff4:	42ab      	cmp	r3, r5
 8000ff6:	dcf2      	bgt.n	8000fde <_printf_i+0x21e>
 8000ff8:	e7eb      	b.n	8000fd2 <_printf_i+0x212>
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	f104 0619 	add.w	r6, r4, #25
 8001000:	e7f5      	b.n	8000fee <_printf_i+0x22e>
 8001002:	bf00      	nop
 8001004:	080016a9 	.word	0x080016a9
 8001008:	080016ba 	.word	0x080016ba

0800100c <_sbrk_r>:
 800100c:	b538      	push	{r3, r4, r5, lr}
 800100e:	4d06      	ldr	r5, [pc, #24]	; (8001028 <_sbrk_r+0x1c>)
 8001010:	2300      	movs	r3, #0
 8001012:	4604      	mov	r4, r0
 8001014:	4608      	mov	r0, r1
 8001016:	602b      	str	r3, [r5, #0]
 8001018:	f7ff fa3e 	bl	8000498 <_sbrk>
 800101c:	1c43      	adds	r3, r0, #1
 800101e:	d102      	bne.n	8001026 <_sbrk_r+0x1a>
 8001020:	682b      	ldr	r3, [r5, #0]
 8001022:	b103      	cbz	r3, 8001026 <_sbrk_r+0x1a>
 8001024:	6023      	str	r3, [r4, #0]
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	20000094 	.word	0x20000094

0800102c <__sread>:
 800102c:	b510      	push	{r4, lr}
 800102e:	460c      	mov	r4, r1
 8001030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001034:	f000 fab2 	bl	800159c <_read_r>
 8001038:	2800      	cmp	r0, #0
 800103a:	bfab      	itete	ge
 800103c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800103e:	89a3      	ldrhlt	r3, [r4, #12]
 8001040:	181b      	addge	r3, r3, r0
 8001042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001046:	bfac      	ite	ge
 8001048:	6563      	strge	r3, [r4, #84]	; 0x54
 800104a:	81a3      	strhlt	r3, [r4, #12]
 800104c:	bd10      	pop	{r4, pc}

0800104e <__swrite>:
 800104e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001052:	461f      	mov	r7, r3
 8001054:	898b      	ldrh	r3, [r1, #12]
 8001056:	05db      	lsls	r3, r3, #23
 8001058:	4605      	mov	r5, r0
 800105a:	460c      	mov	r4, r1
 800105c:	4616      	mov	r6, r2
 800105e:	d505      	bpl.n	800106c <__swrite+0x1e>
 8001060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001064:	2302      	movs	r3, #2
 8001066:	2200      	movs	r2, #0
 8001068:	f000 f9c8 	bl	80013fc <_lseek_r>
 800106c:	89a3      	ldrh	r3, [r4, #12]
 800106e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001076:	81a3      	strh	r3, [r4, #12]
 8001078:	4632      	mov	r2, r6
 800107a:	463b      	mov	r3, r7
 800107c:	4628      	mov	r0, r5
 800107e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001082:	f000 b869 	b.w	8001158 <_write_r>

08001086 <__sseek>:
 8001086:	b510      	push	{r4, lr}
 8001088:	460c      	mov	r4, r1
 800108a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800108e:	f000 f9b5 	bl	80013fc <_lseek_r>
 8001092:	1c43      	adds	r3, r0, #1
 8001094:	89a3      	ldrh	r3, [r4, #12]
 8001096:	bf15      	itete	ne
 8001098:	6560      	strne	r0, [r4, #84]	; 0x54
 800109a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800109e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010a2:	81a3      	strheq	r3, [r4, #12]
 80010a4:	bf18      	it	ne
 80010a6:	81a3      	strhne	r3, [r4, #12]
 80010a8:	bd10      	pop	{r4, pc}

080010aa <__sclose>:
 80010aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ae:	f000 b8d3 	b.w	8001258 <_close_r>
	...

080010b4 <__swbuf_r>:
 80010b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b6:	460e      	mov	r6, r1
 80010b8:	4614      	mov	r4, r2
 80010ba:	4605      	mov	r5, r0
 80010bc:	b118      	cbz	r0, 80010c6 <__swbuf_r+0x12>
 80010be:	6983      	ldr	r3, [r0, #24]
 80010c0:	b90b      	cbnz	r3, 80010c6 <__swbuf_r+0x12>
 80010c2:	f7ff fb81 	bl	80007c8 <__sinit>
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <__swbuf_r+0x98>)
 80010c8:	429c      	cmp	r4, r3
 80010ca:	d12b      	bne.n	8001124 <__swbuf_r+0x70>
 80010cc:	686c      	ldr	r4, [r5, #4]
 80010ce:	69a3      	ldr	r3, [r4, #24]
 80010d0:	60a3      	str	r3, [r4, #8]
 80010d2:	89a3      	ldrh	r3, [r4, #12]
 80010d4:	071a      	lsls	r2, r3, #28
 80010d6:	d52f      	bpl.n	8001138 <__swbuf_r+0x84>
 80010d8:	6923      	ldr	r3, [r4, #16]
 80010da:	b36b      	cbz	r3, 8001138 <__swbuf_r+0x84>
 80010dc:	6923      	ldr	r3, [r4, #16]
 80010de:	6820      	ldr	r0, [r4, #0]
 80010e0:	1ac0      	subs	r0, r0, r3
 80010e2:	6963      	ldr	r3, [r4, #20]
 80010e4:	b2f6      	uxtb	r6, r6
 80010e6:	4283      	cmp	r3, r0
 80010e8:	4637      	mov	r7, r6
 80010ea:	dc04      	bgt.n	80010f6 <__swbuf_r+0x42>
 80010ec:	4621      	mov	r1, r4
 80010ee:	4628      	mov	r0, r5
 80010f0:	f000 f948 	bl	8001384 <_fflush_r>
 80010f4:	bb30      	cbnz	r0, 8001144 <__swbuf_r+0x90>
 80010f6:	68a3      	ldr	r3, [r4, #8]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	60a3      	str	r3, [r4, #8]
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	6022      	str	r2, [r4, #0]
 8001102:	701e      	strb	r6, [r3, #0]
 8001104:	6963      	ldr	r3, [r4, #20]
 8001106:	3001      	adds	r0, #1
 8001108:	4283      	cmp	r3, r0
 800110a:	d004      	beq.n	8001116 <__swbuf_r+0x62>
 800110c:	89a3      	ldrh	r3, [r4, #12]
 800110e:	07db      	lsls	r3, r3, #31
 8001110:	d506      	bpl.n	8001120 <__swbuf_r+0x6c>
 8001112:	2e0a      	cmp	r6, #10
 8001114:	d104      	bne.n	8001120 <__swbuf_r+0x6c>
 8001116:	4621      	mov	r1, r4
 8001118:	4628      	mov	r0, r5
 800111a:	f000 f933 	bl	8001384 <_fflush_r>
 800111e:	b988      	cbnz	r0, 8001144 <__swbuf_r+0x90>
 8001120:	4638      	mov	r0, r7
 8001122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <__swbuf_r+0x9c>)
 8001126:	429c      	cmp	r4, r3
 8001128:	d101      	bne.n	800112e <__swbuf_r+0x7a>
 800112a:	68ac      	ldr	r4, [r5, #8]
 800112c:	e7cf      	b.n	80010ce <__swbuf_r+0x1a>
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <__swbuf_r+0xa0>)
 8001130:	429c      	cmp	r4, r3
 8001132:	bf08      	it	eq
 8001134:	68ec      	ldreq	r4, [r5, #12]
 8001136:	e7ca      	b.n	80010ce <__swbuf_r+0x1a>
 8001138:	4621      	mov	r1, r4
 800113a:	4628      	mov	r0, r5
 800113c:	f000 f81e 	bl	800117c <__swsetup_r>
 8001140:	2800      	cmp	r0, #0
 8001142:	d0cb      	beq.n	80010dc <__swbuf_r+0x28>
 8001144:	f04f 37ff 	mov.w	r7, #4294967295
 8001148:	e7ea      	b.n	8001120 <__swbuf_r+0x6c>
 800114a:	bf00      	nop
 800114c:	08001658 	.word	0x08001658
 8001150:	08001678 	.word	0x08001678
 8001154:	08001638 	.word	0x08001638

08001158 <_write_r>:
 8001158:	b538      	push	{r3, r4, r5, lr}
 800115a:	4d07      	ldr	r5, [pc, #28]	; (8001178 <_write_r+0x20>)
 800115c:	4604      	mov	r4, r0
 800115e:	4608      	mov	r0, r1
 8001160:	4611      	mov	r1, r2
 8001162:	2200      	movs	r2, #0
 8001164:	602a      	str	r2, [r5, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	f7ff f945 	bl	80003f6 <_write>
 800116c:	1c43      	adds	r3, r0, #1
 800116e:	d102      	bne.n	8001176 <_write_r+0x1e>
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	b103      	cbz	r3, 8001176 <_write_r+0x1e>
 8001174:	6023      	str	r3, [r4, #0]
 8001176:	bd38      	pop	{r3, r4, r5, pc}
 8001178:	20000094 	.word	0x20000094

0800117c <__swsetup_r>:
 800117c:	4b32      	ldr	r3, [pc, #200]	; (8001248 <__swsetup_r+0xcc>)
 800117e:	b570      	push	{r4, r5, r6, lr}
 8001180:	681d      	ldr	r5, [r3, #0]
 8001182:	4606      	mov	r6, r0
 8001184:	460c      	mov	r4, r1
 8001186:	b125      	cbz	r5, 8001192 <__swsetup_r+0x16>
 8001188:	69ab      	ldr	r3, [r5, #24]
 800118a:	b913      	cbnz	r3, 8001192 <__swsetup_r+0x16>
 800118c:	4628      	mov	r0, r5
 800118e:	f7ff fb1b 	bl	80007c8 <__sinit>
 8001192:	4b2e      	ldr	r3, [pc, #184]	; (800124c <__swsetup_r+0xd0>)
 8001194:	429c      	cmp	r4, r3
 8001196:	d10f      	bne.n	80011b8 <__swsetup_r+0x3c>
 8001198:	686c      	ldr	r4, [r5, #4]
 800119a:	89a3      	ldrh	r3, [r4, #12]
 800119c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011a0:	0719      	lsls	r1, r3, #28
 80011a2:	d42c      	bmi.n	80011fe <__swsetup_r+0x82>
 80011a4:	06dd      	lsls	r5, r3, #27
 80011a6:	d411      	bmi.n	80011cc <__swsetup_r+0x50>
 80011a8:	2309      	movs	r3, #9
 80011aa:	6033      	str	r3, [r6, #0]
 80011ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011b0:	81a3      	strh	r3, [r4, #12]
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295
 80011b6:	e03e      	b.n	8001236 <__swsetup_r+0xba>
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <__swsetup_r+0xd4>)
 80011ba:	429c      	cmp	r4, r3
 80011bc:	d101      	bne.n	80011c2 <__swsetup_r+0x46>
 80011be:	68ac      	ldr	r4, [r5, #8]
 80011c0:	e7eb      	b.n	800119a <__swsetup_r+0x1e>
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <__swsetup_r+0xd8>)
 80011c4:	429c      	cmp	r4, r3
 80011c6:	bf08      	it	eq
 80011c8:	68ec      	ldreq	r4, [r5, #12]
 80011ca:	e7e6      	b.n	800119a <__swsetup_r+0x1e>
 80011cc:	0758      	lsls	r0, r3, #29
 80011ce:	d512      	bpl.n	80011f6 <__swsetup_r+0x7a>
 80011d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011d2:	b141      	cbz	r1, 80011e6 <__swsetup_r+0x6a>
 80011d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011d8:	4299      	cmp	r1, r3
 80011da:	d002      	beq.n	80011e2 <__swsetup_r+0x66>
 80011dc:	4630      	mov	r0, r6
 80011de:	f000 f991 	bl	8001504 <_free_r>
 80011e2:	2300      	movs	r3, #0
 80011e4:	6363      	str	r3, [r4, #52]	; 0x34
 80011e6:	89a3      	ldrh	r3, [r4, #12]
 80011e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011ec:	81a3      	strh	r3, [r4, #12]
 80011ee:	2300      	movs	r3, #0
 80011f0:	6063      	str	r3, [r4, #4]
 80011f2:	6923      	ldr	r3, [r4, #16]
 80011f4:	6023      	str	r3, [r4, #0]
 80011f6:	89a3      	ldrh	r3, [r4, #12]
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	81a3      	strh	r3, [r4, #12]
 80011fe:	6923      	ldr	r3, [r4, #16]
 8001200:	b94b      	cbnz	r3, 8001216 <__swsetup_r+0x9a>
 8001202:	89a3      	ldrh	r3, [r4, #12]
 8001204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800120c:	d003      	beq.n	8001216 <__swsetup_r+0x9a>
 800120e:	4621      	mov	r1, r4
 8001210:	4630      	mov	r0, r6
 8001212:	f000 f92b 	bl	800146c <__smakebuf_r>
 8001216:	89a0      	ldrh	r0, [r4, #12]
 8001218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800121c:	f010 0301 	ands.w	r3, r0, #1
 8001220:	d00a      	beq.n	8001238 <__swsetup_r+0xbc>
 8001222:	2300      	movs	r3, #0
 8001224:	60a3      	str	r3, [r4, #8]
 8001226:	6963      	ldr	r3, [r4, #20]
 8001228:	425b      	negs	r3, r3
 800122a:	61a3      	str	r3, [r4, #24]
 800122c:	6923      	ldr	r3, [r4, #16]
 800122e:	b943      	cbnz	r3, 8001242 <__swsetup_r+0xc6>
 8001230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001234:	d1ba      	bne.n	80011ac <__swsetup_r+0x30>
 8001236:	bd70      	pop	{r4, r5, r6, pc}
 8001238:	0781      	lsls	r1, r0, #30
 800123a:	bf58      	it	pl
 800123c:	6963      	ldrpl	r3, [r4, #20]
 800123e:	60a3      	str	r3, [r4, #8]
 8001240:	e7f4      	b.n	800122c <__swsetup_r+0xb0>
 8001242:	2000      	movs	r0, #0
 8001244:	e7f7      	b.n	8001236 <__swsetup_r+0xba>
 8001246:	bf00      	nop
 8001248:	20000000 	.word	0x20000000
 800124c:	08001658 	.word	0x08001658
 8001250:	08001678 	.word	0x08001678
 8001254:	08001638 	.word	0x08001638

08001258 <_close_r>:
 8001258:	b538      	push	{r3, r4, r5, lr}
 800125a:	4d06      	ldr	r5, [pc, #24]	; (8001274 <_close_r+0x1c>)
 800125c:	2300      	movs	r3, #0
 800125e:	4604      	mov	r4, r0
 8001260:	4608      	mov	r0, r1
 8001262:	602b      	str	r3, [r5, #0]
 8001264:	f7ff f8e3 	bl	800042e <_close>
 8001268:	1c43      	adds	r3, r0, #1
 800126a:	d102      	bne.n	8001272 <_close_r+0x1a>
 800126c:	682b      	ldr	r3, [r5, #0]
 800126e:	b103      	cbz	r3, 8001272 <_close_r+0x1a>
 8001270:	6023      	str	r3, [r4, #0]
 8001272:	bd38      	pop	{r3, r4, r5, pc}
 8001274:	20000094 	.word	0x20000094

08001278 <__sflush_r>:
 8001278:	898a      	ldrh	r2, [r1, #12]
 800127a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800127e:	4605      	mov	r5, r0
 8001280:	0710      	lsls	r0, r2, #28
 8001282:	460c      	mov	r4, r1
 8001284:	d458      	bmi.n	8001338 <__sflush_r+0xc0>
 8001286:	684b      	ldr	r3, [r1, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	dc05      	bgt.n	8001298 <__sflush_r+0x20>
 800128c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800128e:	2b00      	cmp	r3, #0
 8001290:	dc02      	bgt.n	8001298 <__sflush_r+0x20>
 8001292:	2000      	movs	r0, #0
 8001294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800129a:	2e00      	cmp	r6, #0
 800129c:	d0f9      	beq.n	8001292 <__sflush_r+0x1a>
 800129e:	2300      	movs	r3, #0
 80012a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012a4:	682f      	ldr	r7, [r5, #0]
 80012a6:	602b      	str	r3, [r5, #0]
 80012a8:	d032      	beq.n	8001310 <__sflush_r+0x98>
 80012aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012ac:	89a3      	ldrh	r3, [r4, #12]
 80012ae:	075a      	lsls	r2, r3, #29
 80012b0:	d505      	bpl.n	80012be <__sflush_r+0x46>
 80012b2:	6863      	ldr	r3, [r4, #4]
 80012b4:	1ac0      	subs	r0, r0, r3
 80012b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012b8:	b10b      	cbz	r3, 80012be <__sflush_r+0x46>
 80012ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012bc:	1ac0      	subs	r0, r0, r3
 80012be:	2300      	movs	r3, #0
 80012c0:	4602      	mov	r2, r0
 80012c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012c4:	6a21      	ldr	r1, [r4, #32]
 80012c6:	4628      	mov	r0, r5
 80012c8:	47b0      	blx	r6
 80012ca:	1c43      	adds	r3, r0, #1
 80012cc:	89a3      	ldrh	r3, [r4, #12]
 80012ce:	d106      	bne.n	80012de <__sflush_r+0x66>
 80012d0:	6829      	ldr	r1, [r5, #0]
 80012d2:	291d      	cmp	r1, #29
 80012d4:	d82c      	bhi.n	8001330 <__sflush_r+0xb8>
 80012d6:	4a2a      	ldr	r2, [pc, #168]	; (8001380 <__sflush_r+0x108>)
 80012d8:	40ca      	lsrs	r2, r1
 80012da:	07d6      	lsls	r6, r2, #31
 80012dc:	d528      	bpl.n	8001330 <__sflush_r+0xb8>
 80012de:	2200      	movs	r2, #0
 80012e0:	6062      	str	r2, [r4, #4]
 80012e2:	04d9      	lsls	r1, r3, #19
 80012e4:	6922      	ldr	r2, [r4, #16]
 80012e6:	6022      	str	r2, [r4, #0]
 80012e8:	d504      	bpl.n	80012f4 <__sflush_r+0x7c>
 80012ea:	1c42      	adds	r2, r0, #1
 80012ec:	d101      	bne.n	80012f2 <__sflush_r+0x7a>
 80012ee:	682b      	ldr	r3, [r5, #0]
 80012f0:	b903      	cbnz	r3, 80012f4 <__sflush_r+0x7c>
 80012f2:	6560      	str	r0, [r4, #84]	; 0x54
 80012f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012f6:	602f      	str	r7, [r5, #0]
 80012f8:	2900      	cmp	r1, #0
 80012fa:	d0ca      	beq.n	8001292 <__sflush_r+0x1a>
 80012fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001300:	4299      	cmp	r1, r3
 8001302:	d002      	beq.n	800130a <__sflush_r+0x92>
 8001304:	4628      	mov	r0, r5
 8001306:	f000 f8fd 	bl	8001504 <_free_r>
 800130a:	2000      	movs	r0, #0
 800130c:	6360      	str	r0, [r4, #52]	; 0x34
 800130e:	e7c1      	b.n	8001294 <__sflush_r+0x1c>
 8001310:	6a21      	ldr	r1, [r4, #32]
 8001312:	2301      	movs	r3, #1
 8001314:	4628      	mov	r0, r5
 8001316:	47b0      	blx	r6
 8001318:	1c41      	adds	r1, r0, #1
 800131a:	d1c7      	bne.n	80012ac <__sflush_r+0x34>
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0c4      	beq.n	80012ac <__sflush_r+0x34>
 8001322:	2b1d      	cmp	r3, #29
 8001324:	d001      	beq.n	800132a <__sflush_r+0xb2>
 8001326:	2b16      	cmp	r3, #22
 8001328:	d101      	bne.n	800132e <__sflush_r+0xb6>
 800132a:	602f      	str	r7, [r5, #0]
 800132c:	e7b1      	b.n	8001292 <__sflush_r+0x1a>
 800132e:	89a3      	ldrh	r3, [r4, #12]
 8001330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001334:	81a3      	strh	r3, [r4, #12]
 8001336:	e7ad      	b.n	8001294 <__sflush_r+0x1c>
 8001338:	690f      	ldr	r7, [r1, #16]
 800133a:	2f00      	cmp	r7, #0
 800133c:	d0a9      	beq.n	8001292 <__sflush_r+0x1a>
 800133e:	0793      	lsls	r3, r2, #30
 8001340:	680e      	ldr	r6, [r1, #0]
 8001342:	bf08      	it	eq
 8001344:	694b      	ldreq	r3, [r1, #20]
 8001346:	600f      	str	r7, [r1, #0]
 8001348:	bf18      	it	ne
 800134a:	2300      	movne	r3, #0
 800134c:	eba6 0807 	sub.w	r8, r6, r7
 8001350:	608b      	str	r3, [r1, #8]
 8001352:	f1b8 0f00 	cmp.w	r8, #0
 8001356:	dd9c      	ble.n	8001292 <__sflush_r+0x1a>
 8001358:	6a21      	ldr	r1, [r4, #32]
 800135a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800135c:	4643      	mov	r3, r8
 800135e:	463a      	mov	r2, r7
 8001360:	4628      	mov	r0, r5
 8001362:	47b0      	blx	r6
 8001364:	2800      	cmp	r0, #0
 8001366:	dc06      	bgt.n	8001376 <__sflush_r+0xfe>
 8001368:	89a3      	ldrh	r3, [r4, #12]
 800136a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136e:	81a3      	strh	r3, [r4, #12]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	e78e      	b.n	8001294 <__sflush_r+0x1c>
 8001376:	4407      	add	r7, r0
 8001378:	eba8 0800 	sub.w	r8, r8, r0
 800137c:	e7e9      	b.n	8001352 <__sflush_r+0xda>
 800137e:	bf00      	nop
 8001380:	20400001 	.word	0x20400001

08001384 <_fflush_r>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	690b      	ldr	r3, [r1, #16]
 8001388:	4605      	mov	r5, r0
 800138a:	460c      	mov	r4, r1
 800138c:	b913      	cbnz	r3, 8001394 <_fflush_r+0x10>
 800138e:	2500      	movs	r5, #0
 8001390:	4628      	mov	r0, r5
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	b118      	cbz	r0, 800139e <_fflush_r+0x1a>
 8001396:	6983      	ldr	r3, [r0, #24]
 8001398:	b90b      	cbnz	r3, 800139e <_fflush_r+0x1a>
 800139a:	f7ff fa15 	bl	80007c8 <__sinit>
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <_fflush_r+0x6c>)
 80013a0:	429c      	cmp	r4, r3
 80013a2:	d11b      	bne.n	80013dc <_fflush_r+0x58>
 80013a4:	686c      	ldr	r4, [r5, #4]
 80013a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0ef      	beq.n	800138e <_fflush_r+0xa>
 80013ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013b0:	07d0      	lsls	r0, r2, #31
 80013b2:	d404      	bmi.n	80013be <_fflush_r+0x3a>
 80013b4:	0599      	lsls	r1, r3, #22
 80013b6:	d402      	bmi.n	80013be <_fflush_r+0x3a>
 80013b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ba:	f7ff faa3 	bl	8000904 <__retarget_lock_acquire_recursive>
 80013be:	4628      	mov	r0, r5
 80013c0:	4621      	mov	r1, r4
 80013c2:	f7ff ff59 	bl	8001278 <__sflush_r>
 80013c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013c8:	07da      	lsls	r2, r3, #31
 80013ca:	4605      	mov	r5, r0
 80013cc:	d4e0      	bmi.n	8001390 <_fflush_r+0xc>
 80013ce:	89a3      	ldrh	r3, [r4, #12]
 80013d0:	059b      	lsls	r3, r3, #22
 80013d2:	d4dd      	bmi.n	8001390 <_fflush_r+0xc>
 80013d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013d6:	f7ff fa96 	bl	8000906 <__retarget_lock_release_recursive>
 80013da:	e7d9      	b.n	8001390 <_fflush_r+0xc>
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <_fflush_r+0x70>)
 80013de:	429c      	cmp	r4, r3
 80013e0:	d101      	bne.n	80013e6 <_fflush_r+0x62>
 80013e2:	68ac      	ldr	r4, [r5, #8]
 80013e4:	e7df      	b.n	80013a6 <_fflush_r+0x22>
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <_fflush_r+0x74>)
 80013e8:	429c      	cmp	r4, r3
 80013ea:	bf08      	it	eq
 80013ec:	68ec      	ldreq	r4, [r5, #12]
 80013ee:	e7da      	b.n	80013a6 <_fflush_r+0x22>
 80013f0:	08001658 	.word	0x08001658
 80013f4:	08001678 	.word	0x08001678
 80013f8:	08001638 	.word	0x08001638

080013fc <_lseek_r>:
 80013fc:	b538      	push	{r3, r4, r5, lr}
 80013fe:	4d07      	ldr	r5, [pc, #28]	; (800141c <_lseek_r+0x20>)
 8001400:	4604      	mov	r4, r0
 8001402:	4608      	mov	r0, r1
 8001404:	4611      	mov	r1, r2
 8001406:	2200      	movs	r2, #0
 8001408:	602a      	str	r2, [r5, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	f7ff f836 	bl	800047c <_lseek>
 8001410:	1c43      	adds	r3, r0, #1
 8001412:	d102      	bne.n	800141a <_lseek_r+0x1e>
 8001414:	682b      	ldr	r3, [r5, #0]
 8001416:	b103      	cbz	r3, 800141a <_lseek_r+0x1e>
 8001418:	6023      	str	r3, [r4, #0]
 800141a:	bd38      	pop	{r3, r4, r5, pc}
 800141c:	20000094 	.word	0x20000094

08001420 <__swhatbuf_r>:
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	460e      	mov	r6, r1
 8001424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001428:	2900      	cmp	r1, #0
 800142a:	b096      	sub	sp, #88	; 0x58
 800142c:	4614      	mov	r4, r2
 800142e:	461d      	mov	r5, r3
 8001430:	da08      	bge.n	8001444 <__swhatbuf_r+0x24>
 8001432:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	602a      	str	r2, [r5, #0]
 800143a:	061a      	lsls	r2, r3, #24
 800143c:	d410      	bmi.n	8001460 <__swhatbuf_r+0x40>
 800143e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001442:	e00e      	b.n	8001462 <__swhatbuf_r+0x42>
 8001444:	466a      	mov	r2, sp
 8001446:	f000 f8bb 	bl	80015c0 <_fstat_r>
 800144a:	2800      	cmp	r0, #0
 800144c:	dbf1      	blt.n	8001432 <__swhatbuf_r+0x12>
 800144e:	9a01      	ldr	r2, [sp, #4]
 8001450:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001454:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001458:	425a      	negs	r2, r3
 800145a:	415a      	adcs	r2, r3
 800145c:	602a      	str	r2, [r5, #0]
 800145e:	e7ee      	b.n	800143e <__swhatbuf_r+0x1e>
 8001460:	2340      	movs	r3, #64	; 0x40
 8001462:	2000      	movs	r0, #0
 8001464:	6023      	str	r3, [r4, #0]
 8001466:	b016      	add	sp, #88	; 0x58
 8001468:	bd70      	pop	{r4, r5, r6, pc}
	...

0800146c <__smakebuf_r>:
 800146c:	898b      	ldrh	r3, [r1, #12]
 800146e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001470:	079d      	lsls	r5, r3, #30
 8001472:	4606      	mov	r6, r0
 8001474:	460c      	mov	r4, r1
 8001476:	d507      	bpl.n	8001488 <__smakebuf_r+0x1c>
 8001478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800147c:	6023      	str	r3, [r4, #0]
 800147e:	6123      	str	r3, [r4, #16]
 8001480:	2301      	movs	r3, #1
 8001482:	6163      	str	r3, [r4, #20]
 8001484:	b002      	add	sp, #8
 8001486:	bd70      	pop	{r4, r5, r6, pc}
 8001488:	ab01      	add	r3, sp, #4
 800148a:	466a      	mov	r2, sp
 800148c:	f7ff ffc8 	bl	8001420 <__swhatbuf_r>
 8001490:	9900      	ldr	r1, [sp, #0]
 8001492:	4605      	mov	r5, r0
 8001494:	4630      	mov	r0, r6
 8001496:	f7ff fa57 	bl	8000948 <_malloc_r>
 800149a:	b948      	cbnz	r0, 80014b0 <__smakebuf_r+0x44>
 800149c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014a0:	059a      	lsls	r2, r3, #22
 80014a2:	d4ef      	bmi.n	8001484 <__smakebuf_r+0x18>
 80014a4:	f023 0303 	bic.w	r3, r3, #3
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	81a3      	strh	r3, [r4, #12]
 80014ae:	e7e3      	b.n	8001478 <__smakebuf_r+0xc>
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <__smakebuf_r+0x7c>)
 80014b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80014b4:	89a3      	ldrh	r3, [r4, #12]
 80014b6:	6020      	str	r0, [r4, #0]
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	81a3      	strh	r3, [r4, #12]
 80014be:	9b00      	ldr	r3, [sp, #0]
 80014c0:	6163      	str	r3, [r4, #20]
 80014c2:	9b01      	ldr	r3, [sp, #4]
 80014c4:	6120      	str	r0, [r4, #16]
 80014c6:	b15b      	cbz	r3, 80014e0 <__smakebuf_r+0x74>
 80014c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014cc:	4630      	mov	r0, r6
 80014ce:	f000 f889 	bl	80015e4 <_isatty_r>
 80014d2:	b128      	cbz	r0, 80014e0 <__smakebuf_r+0x74>
 80014d4:	89a3      	ldrh	r3, [r4, #12]
 80014d6:	f023 0303 	bic.w	r3, r3, #3
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	81a3      	strh	r3, [r4, #12]
 80014e0:	89a0      	ldrh	r0, [r4, #12]
 80014e2:	4305      	orrs	r5, r0
 80014e4:	81a5      	strh	r5, [r4, #12]
 80014e6:	e7cd      	b.n	8001484 <__smakebuf_r+0x18>
 80014e8:	08000761 	.word	0x08000761

080014ec <__malloc_lock>:
 80014ec:	4801      	ldr	r0, [pc, #4]	; (80014f4 <__malloc_lock+0x8>)
 80014ee:	f7ff ba09 	b.w	8000904 <__retarget_lock_acquire_recursive>
 80014f2:	bf00      	nop
 80014f4:	20000088 	.word	0x20000088

080014f8 <__malloc_unlock>:
 80014f8:	4801      	ldr	r0, [pc, #4]	; (8001500 <__malloc_unlock+0x8>)
 80014fa:	f7ff ba04 	b.w	8000906 <__retarget_lock_release_recursive>
 80014fe:	bf00      	nop
 8001500:	20000088 	.word	0x20000088

08001504 <_free_r>:
 8001504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001506:	2900      	cmp	r1, #0
 8001508:	d044      	beq.n	8001594 <_free_r+0x90>
 800150a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800150e:	9001      	str	r0, [sp, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f1a1 0404 	sub.w	r4, r1, #4
 8001516:	bfb8      	it	lt
 8001518:	18e4      	addlt	r4, r4, r3
 800151a:	f7ff ffe7 	bl	80014ec <__malloc_lock>
 800151e:	4a1e      	ldr	r2, [pc, #120]	; (8001598 <_free_r+0x94>)
 8001520:	9801      	ldr	r0, [sp, #4]
 8001522:	6813      	ldr	r3, [r2, #0]
 8001524:	b933      	cbnz	r3, 8001534 <_free_r+0x30>
 8001526:	6063      	str	r3, [r4, #4]
 8001528:	6014      	str	r4, [r2, #0]
 800152a:	b003      	add	sp, #12
 800152c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001530:	f7ff bfe2 	b.w	80014f8 <__malloc_unlock>
 8001534:	42a3      	cmp	r3, r4
 8001536:	d908      	bls.n	800154a <_free_r+0x46>
 8001538:	6825      	ldr	r5, [r4, #0]
 800153a:	1961      	adds	r1, r4, r5
 800153c:	428b      	cmp	r3, r1
 800153e:	bf01      	itttt	eq
 8001540:	6819      	ldreq	r1, [r3, #0]
 8001542:	685b      	ldreq	r3, [r3, #4]
 8001544:	1949      	addeq	r1, r1, r5
 8001546:	6021      	streq	r1, [r4, #0]
 8001548:	e7ed      	b.n	8001526 <_free_r+0x22>
 800154a:	461a      	mov	r2, r3
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	b10b      	cbz	r3, 8001554 <_free_r+0x50>
 8001550:	42a3      	cmp	r3, r4
 8001552:	d9fa      	bls.n	800154a <_free_r+0x46>
 8001554:	6811      	ldr	r1, [r2, #0]
 8001556:	1855      	adds	r5, r2, r1
 8001558:	42a5      	cmp	r5, r4
 800155a:	d10b      	bne.n	8001574 <_free_r+0x70>
 800155c:	6824      	ldr	r4, [r4, #0]
 800155e:	4421      	add	r1, r4
 8001560:	1854      	adds	r4, r2, r1
 8001562:	42a3      	cmp	r3, r4
 8001564:	6011      	str	r1, [r2, #0]
 8001566:	d1e0      	bne.n	800152a <_free_r+0x26>
 8001568:	681c      	ldr	r4, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	6053      	str	r3, [r2, #4]
 800156e:	4421      	add	r1, r4
 8001570:	6011      	str	r1, [r2, #0]
 8001572:	e7da      	b.n	800152a <_free_r+0x26>
 8001574:	d902      	bls.n	800157c <_free_r+0x78>
 8001576:	230c      	movs	r3, #12
 8001578:	6003      	str	r3, [r0, #0]
 800157a:	e7d6      	b.n	800152a <_free_r+0x26>
 800157c:	6825      	ldr	r5, [r4, #0]
 800157e:	1961      	adds	r1, r4, r5
 8001580:	428b      	cmp	r3, r1
 8001582:	bf04      	itt	eq
 8001584:	6819      	ldreq	r1, [r3, #0]
 8001586:	685b      	ldreq	r3, [r3, #4]
 8001588:	6063      	str	r3, [r4, #4]
 800158a:	bf04      	itt	eq
 800158c:	1949      	addeq	r1, r1, r5
 800158e:	6021      	streq	r1, [r4, #0]
 8001590:	6054      	str	r4, [r2, #4]
 8001592:	e7ca      	b.n	800152a <_free_r+0x26>
 8001594:	b003      	add	sp, #12
 8001596:	bd30      	pop	{r4, r5, pc}
 8001598:	2000008c 	.word	0x2000008c

0800159c <_read_r>:
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	4d07      	ldr	r5, [pc, #28]	; (80015bc <_read_r+0x20>)
 80015a0:	4604      	mov	r4, r0
 80015a2:	4608      	mov	r0, r1
 80015a4:	4611      	mov	r1, r2
 80015a6:	2200      	movs	r2, #0
 80015a8:	602a      	str	r2, [r5, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	f7fe ff06 	bl	80003bc <_read>
 80015b0:	1c43      	adds	r3, r0, #1
 80015b2:	d102      	bne.n	80015ba <_read_r+0x1e>
 80015b4:	682b      	ldr	r3, [r5, #0]
 80015b6:	b103      	cbz	r3, 80015ba <_read_r+0x1e>
 80015b8:	6023      	str	r3, [r4, #0]
 80015ba:	bd38      	pop	{r3, r4, r5, pc}
 80015bc:	20000094 	.word	0x20000094

080015c0 <_fstat_r>:
 80015c0:	b538      	push	{r3, r4, r5, lr}
 80015c2:	4d07      	ldr	r5, [pc, #28]	; (80015e0 <_fstat_r+0x20>)
 80015c4:	2300      	movs	r3, #0
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	602b      	str	r3, [r5, #0]
 80015ce:	f7fe ff3a 	bl	8000446 <_fstat>
 80015d2:	1c43      	adds	r3, r0, #1
 80015d4:	d102      	bne.n	80015dc <_fstat_r+0x1c>
 80015d6:	682b      	ldr	r3, [r5, #0]
 80015d8:	b103      	cbz	r3, 80015dc <_fstat_r+0x1c>
 80015da:	6023      	str	r3, [r4, #0]
 80015dc:	bd38      	pop	{r3, r4, r5, pc}
 80015de:	bf00      	nop
 80015e0:	20000094 	.word	0x20000094

080015e4 <_isatty_r>:
 80015e4:	b538      	push	{r3, r4, r5, lr}
 80015e6:	4d06      	ldr	r5, [pc, #24]	; (8001600 <_isatty_r+0x1c>)
 80015e8:	2300      	movs	r3, #0
 80015ea:	4604      	mov	r4, r0
 80015ec:	4608      	mov	r0, r1
 80015ee:	602b      	str	r3, [r5, #0]
 80015f0:	f7fe ff39 	bl	8000466 <_isatty>
 80015f4:	1c43      	adds	r3, r0, #1
 80015f6:	d102      	bne.n	80015fe <_isatty_r+0x1a>
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	b103      	cbz	r3, 80015fe <_isatty_r+0x1a>
 80015fc:	6023      	str	r3, [r4, #0]
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
 8001600:	20000094 	.word	0x20000094

08001604 <_init>:
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	bf00      	nop
 8001608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800160a:	bc08      	pop	{r3}
 800160c:	469e      	mov	lr, r3
 800160e:	4770      	bx	lr

08001610 <_fini>:
 8001610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001612:	bf00      	nop
 8001614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001616:	bc08      	pop	{r3}
 8001618:	469e      	mov	lr, r3
 800161a:	4770      	bx	lr
